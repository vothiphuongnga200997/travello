{
    "name": "Telnet",
    "version": "3.0.4",
    "keywords": [
        {
            "name": "Close All Connections",
            "args": [],
            "doc": "Closes all open connections and empties the connection cache.\n\nIf multiple connections are opened, this keyword should be used in a test or suite teardown to make sure that all connections are closed. It is not an error is some of the connections have already been closed by [Close Connection](#Close%20Connection).\n\nAfter this keyword, new indexes returned by [Open Connection](#Open%20Connection) keyword are reset to 1."
        },
        {
            "name": "Close Connection",
            "args": [
                "loglevel=None"
            ],
            "doc": "Closes the current Telnet connection.\n\nRemaining output in the connection is read, logged, and returned. It is not an error to close an already closed connection.\n\nUse [Close All Connections](#Close%20All%20Connections) if you want to make sure all opened connections are closed.\n\nSee [Logging](#Logging) section for more information about log levels."
        },
        {
            "name": "Execute Command",
            "args": [
                "command",
                "loglevel=None",
                "strip_prompt=False"
            ],
            "doc": "Executes the given `command` and reads, logs, and returns everything until the prompt.\n\nThis keyword requires the prompt to be [configured](#Configuration) either in [importing](#Importing) or with [Open Connection](#Open%20Connection) or [Set Prompt](#Set%20Prompt) keyword.\n\nThis is a convenience keyword that uses [Write](#Write) and [Read Until Prompt](#Read%20Until%20Prompt) internally. Following two examples are thus functionally identical:\n\n```\n${out} =  Execute Command  pwd\n``````\nWrite  pwd\n${out} =  Read Until Prompt\n```\n\nSee [Logging](#Logging) section for more information about log levels and [Read Until Prompt](#Read%20Until%20Prompt) for more information about the `strip_prompt` parameter."
        },
        {
            "name": "Login",
            "args": [
                "username",
                "password",
                "login_prompt=login: ",
                "password_prompt=Password: ",
                "login_timeout=1 second",
                "login_incorrect=Login incorrect"
            ],
            "doc": "Logs in to the Telnet server with the given user information.\n\nThis keyword reads from the connection until the `login_prompt` is encountered and then types the given `username`. Then it reads until the `password_prompt` and types the given `password`. In both cases a newline is appended automatically and the connection specific timeout used when waiting for outputs.\n\nHow logging status is verified depends on whether a prompt is set for this connection or not:\n\n1) If the prompt is set, this keyword reads the output until the prompt is found using the normal timeout. If no prompt is found, login is considered failed and also this keyword fails. Note that in this case both `login_timeout` and `login_incorrect` arguments are ignored.\n\n2) If the prompt is not set, this keywords sleeps until `login_timeout` and then reads all the output available on the connection. If the output contains `login_incorrect` text, login is considered failed and also this keyword fails. Both of these configuration parameters were added in Robot Framework 2.7.6. In earlier versions they were hard coded.\n\nSee [Configuration](#Configuration) section for more information about setting newline, timeout, and prompt."
        },
        {
            "name": "Open Connection",
            "args": [
                "host",
                "alias=None",
                "port=23",
                "timeout=None",
                "newline=None",
                "prompt=None",
                "prompt_is_regexp=False",
                "encoding=None",
                "encoding_errors=None",
                "default_log_level=None",
                "window_size=None",
                "environ_user=None",
                "terminal_emulation=None",
                "terminal_type=None",
                "telnetlib_log_level=None",
                "connection_timeout=None"
            ],
            "doc": "Opens a new Telnet connection to the given host and port.\n\nThe `timeout`, `newline`, `prompt`, `prompt_is_regexp`, `encoding`, `default_log_level`, `window_size`, `environ_user`, `terminal_emulation`, `terminal_type` and `telnetlib_log_level` arguments get default values when the library is [imported](#Importing). Setting them here overrides those values for the opened connection. See [Configuration](#Configuration), [Terminal emulation](#Terminal%20emulation) and [Logging](#Logging) sections for more information about these parameters and their possible values.\n\nPossible already opened connections are cached and it is possible to switch back to them using [Switch Connection](#Switch%20Connection) keyword. It is possible to switch either using explicitly given `alias` or using index returned by this keyword. Indexing starts from 1 and is reset back to it by [Close All Connections](#Close%20All%20Connections) keyword."
        },
        {
            "name": "Read",
            "args": [
                "loglevel=None"
            ],
            "doc": "Reads everything that is currently available in the output.\n\nRead output is both returned and logged. See [Logging](#Logging) section for more information about log levels."
        },
        {
            "name": "Read Until",
            "args": [
                "expected",
                "loglevel=None"
            ],
            "doc": "Reads output until `expected` text is encountered.\n\nText up to and including the match is returned and logged. If no match is found, this keyword fails. How much to wait for the output depends on the [configured timeout](#Configuration).\n\nSee [Logging](#Logging) section for more information about log levels. Use [Read Until Regexp](#Read%20Until%20Regexp) if more complex matching is needed."
        },
        {
            "name": "Read Until Prompt",
            "args": [
                "loglevel=None",
                "strip_prompt=False"
            ],
            "doc": "Reads output until the prompt is encountered.\n\nThis keyword requires the prompt to be [configured](#Configuration) either in [importing](#Importing) or with [Open Connection](#Open%20Connection) or [Set Prompt](#Set%20Prompt) keyword.\n\nBy default, text up to and including the prompt is returned and logged. If no prompt is found, this keyword fails. How much to wait for the output depends on the [configured timeout](#Configuration).\n\nIf you want to exclude the prompt from the returned output, set `strip_prompt` to a true value (see [Boolean arguments](#Boolean%20arguments)). If your prompt is a regular expression, make sure that the expression spans the whole prompt, because only the part of the output that matches the regular expression is stripped away.\n\nSee [Logging](#Logging) section for more information about log levels.\n\nOptionally stripping prompt is a new feature in Robot Framework 2.8.7."
        },
        {
            "name": "Read Until Regexp",
            "args": [
                "*expected"
            ],
            "doc": "Reads output until any of the `expected` regular expressions match.\n\nThis keyword accepts any number of regular expressions patterns or compiled Python regular expression objects as arguments. Text up to and including the first match to any of the regular expressions is returned and logged. If no match is found, this keyword fails. How much to wait for the output depends on the [configured timeout](#Configuration).\n\nIf the last given argument is a [valid log level](#Logging), it is used as `loglevel` similarly as with [Read Until](#Read%20Until) keyword.\n\nSee the documentation of [Python re module](http://docs.python.org/2/library/re.html) for more information about the supported regular expression syntax. Notice that possible backslashes need to be escaped in Robot Framework test data.\n\nExamples:\n\n```\nRead Until Regexp  (#|$)  \nRead Until Regexp  first_regexp  second_regexp\nRead Until Regexp  \\\\d{4}-\\\\d{2}-\\\\d{2}  DEBUG\n```"
        },
        {
            "name": "Set Default Log Level",
            "args": [
                "level"
            ],
            "doc": "Sets the default log level used for [logging](#Logging) in the current connection.\n\nThe old default log level is returned and can be used to restore the log level later.\n\nSee [Configuration](#Configuration) section for more information about global and connection specific configuration."
        },
        {
            "name": "Set Encoding",
            "args": [
                "encoding=None",
                "errors=None"
            ],
            "doc": "Sets the encoding to use for [writing and reading](#Writing%20and%20reading) in the current connection.\n\nThe given `encoding` specifies the encoding to use when written/read text is encoded/decoded, and `errors` specifies the error handler to use if encoding/decoding fails. Either of these can be omitted and in that case the old value is not affected. Use string `NONE` to disable encoding altogether.\n\nSee [Configuration](#Configuration) section for more information about encoding and error handlers, as well as global and connection specific configuration in general.\n\nThe old values are returned and can be used to restore the encoding and the error handler later. See [Set Prompt](#Set%20Prompt) for a similar example.\n\nIf terminal emulation is used, the encoding can not be changed on an open connection.\n\nSetting encoding in general is a new feature in Robot Framework 2.7.6. Specifying the error handler and disabling encoding were added in 2.7.7."
        },
        {
            "name": "Set Newline",
            "args": [
                "newline"
            ],
            "doc": "Sets the newline used by [Write](#Write) keyword in the current connection.\n\nThe old newline is returned and can be used to restore the newline later. See [Set Timeout](#Set%20Timeout) for a similar example.\n\nIf terminal emulation is used, the newline can not be changed on an open connection.\n\nSee [Configuration](#Configuration) section for more information about global and connection specific configuration."
        },
        {
            "name": "Set Prompt",
            "args": [
                "prompt",
                "prompt_is_regexp=False"
            ],
            "doc": "Sets the prompt used by [Read Until Prompt](#Read%20Until%20Prompt) and [Login](#Login) in the current connection.\n\nIf `prompt_is_regexp` is given a true value (see [Boolean arguments](#Boolean%20arguments)), the given `prompt` is considered to be a regular expression.\n\nThe old prompt is returned and can be used to restore the prompt later.\n\nExample:\n\n```\n${prompt}  ${regexp} =  Set Prompt  $\nDo Something      \nSet Prompt  ${prompt}  ${regexp}  \n```\n\nSee the documentation of [Python re module](http://docs.python.org/2/library/re.html) for more information about the supported regular expression syntax. Notice that possible backslashes need to be escaped in Robot Framework test data.\n\nSee [Configuration](#Configuration) section for more information about global and connection specific configuration."
        },
        {
            "name": "Set Telnetlib Log Level",
            "args": [
                "level"
            ],
            "doc": "Sets the log level used for [logging](#Logging) in the underlying `telnetlib`.\n\nNote that `telnetlib` can be very noisy thus using the level `NONE` can shutdown the messages generated by this library.\n\nNew in Robot Framework 2.8.7."
        },
        {
            "name": "Set Timeout",
            "args": [
                "timeout"
            ],
            "doc": "Sets the timeout used for waiting output in the current connection.\n\nRead operations that expect some output to appear ([Read Until](#Read%20Until), [Read Until Regexp](#Read%20Until%20Regexp), [Read Until Prompt](#Read%20Until%20Prompt), [Login](#Login)) use this timeout and fail if the expected output does not appear before this timeout expires.\n\nThe `timeout` must be given in [time string format](#Time%20string%20format). The old timeout is returned and can be used to restore the timeout later.\n\nExample:\n\n```\n${old} =  Set Timeout  2 minute 30 seconds\nDo Something    \nSet Timeout  ${old}  \n```\n\nSee [Configuration](#Configuration) section for more information about global and connection specific configuration."
        },
        {
            "name": "Switch Connection",
            "args": [
                "index_or_alias"
            ],
            "doc": "Switches between active connections using an index or an alias.\n\nAliases can be given to [Open Connection](#Open%20Connection) keyword which also always returns the connection index.\n\nThis keyword returns the index of previous active connection.\n\nExample:\n\n```\nOpen Connection  myhost.net    \nLogin  john  secret  \nWrite  some command    \nOpen Connection  yourhost.com  2nd conn  \nLogin  root  password  \nWrite  another cmd    \n${old index}=  Switch Connection  1  # index\nWrite  something    \nSwitch Connection  2nd conn    # alias\nWrite  whatever    \nSwitch Connection  ${old index}    # back to original\n[Teardown]  Close All Connections    \n```\n\nThe example above expects that there were no other open connections when opening the first one, because it used index `1` when switching to the connection later. If you are not sure about that, you can store the index into a variable as shown below.\n\n```\n${index} =  Open Connection  myhost.net\nDo Something    \nSwitch Connection  ${index}  \n```"
        },
        {
            "name": "Write",
            "args": [
                "text",
                "loglevel=None"
            ],
            "doc": "Writes the given text plus a newline into the connection.\n\nThe newline character sequence to use can be [configured](#Configuration) both globally and per connection basis. The default value is `CRLF`.\n\nThis keyword consumes the written text, until the added newline, from the output and logs and returns it. The given text itself must not contain newlines. Use [Write Bare](#Write%20Bare) instead if either of these features causes a problem.\n\n**Note:** This keyword does not return the possible output of the executed command. To get the output, one of the Read ... [keywords](#Keywords) must be used. See [Writing and reading](#Writing%20and%20reading) section for more details.\n\nSee [Logging](#Logging) section for more information about log levels."
        },
        {
            "name": "Write Bare",
            "args": [
                "text"
            ],
            "doc": "Writes the given text, and nothing else, into the connection.\n\nThis keyword does not append a newline nor consume the written text. Use [Write](#Write) if these features are needed."
        },
        {
            "name": "Write Control Character",
            "args": [
                "character"
            ],
            "doc": "Writes the given control character into the connection.\n\nThe control character is prepended with an IAC (interpret as command) character.\n\nThe following control character names are supported: BRK, IP, AO, AYT, EC, EL, NOP. Additionally, you can use arbitrary numbers to send any control character.\n\nExample:\n\n```\nWrite Control Character  BRK  # Send Break command\nWrite Control Character  241  # Send No operation command\n```"
        },
        {
            "name": "Write Until Expected Output",
            "args": [
                "text",
                "expected",
                "timeout",
                "retry_interval",
                "loglevel=None"
            ],
            "doc": "Writes the given `text` repeatedly, until `expected` appears in the output.\n\n`text` is written without appending a newline and it is consumed from the output before trying to find `expected`. If `expected` does not appear in the output within `timeout`, this keyword fails.\n\n`retry_interval` defines the time to wait `expected` to appear before writing the `text` again. Consuming the written `text` is subject to the normal [configured timeout](#Configuration).\n\nBoth `timeout` and `retry_interval` must be given in [time string format](#Time%20string%20format). See [Logging](#Logging) section for more information about log levels.\n\nExample:\n\n```\nWrite Until Expected Output  ps -ef| grep myprocess\\r\\n  myprocess\n...  5 s  0.5 s\n```\n\nThe above example writes command `ps -ef | grep myprocess\\r\\n` until `myprocess` appears in the output. The command is written every 0.5 seconds and the keyword fails if `myprocess` does not appear in the output in 5 seconds."
        }
    ]
}