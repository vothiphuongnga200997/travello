{
    "name": "SeleniumLibrary",
    "version": "3.2.0",
    "keywords": [
        {
            "name": "Add Cookie",
            "args": [
                "name",
                "value",
                "path=None",
                "domain=None",
                "secure=None",
                "expiry=None"
            ],
            "doc": "Adds a cookie to your current session.\n\n`name` and `value` are required, `path`, `domain`, `secure` and `expiry` are optional. Expiry supports the same formats as the [DateTime](http://robotframework.org/robotframework/latest/libraries/DateTime.html) library or an epoch time stamp.\n\nExample:\n\n```\nAdd Cookie  foo  bar    \nAdd Cookie  foo  bar  domain=example.com  \nAdd Cookie  foo  bar  expiry=2027-09-28 16:21:35  # Expiry as timestamp.\nAdd Cookie  foo  bar  expiry=1822137695  # Expiry as epoch seconds.\n```\n\nPrior to SeleniumLibrary 3.0 setting expiry did not work."
        },
        {
            "name": "Add Location Strategy",
            "args": [
                "strategy_name",
                "strategy_keyword",
                "persist=False"
            ],
            "doc": "Adds a custom location strategy.\n\nSee [Custom locators](#Custom%20locators) for information how to create and use custom strategies. [Remove Location Strategy](#Remove%20Location%20Strategy) can be used to remove a registered strategy.\n\nLocation strategies are automatically removed after leaving the current scope by default. Setting `persist` to a true value (see [Boolean arguments](#Boolean%20arguments)) will cause the location strategy to stay registered throughout the life of the test."
        },
        {
            "name": "Alert Should Be Present",
            "args": [
                "text=",
                "action=ACCEPT",
                "timeout=None"
            ],
            "doc": "Verifies that an alert is present and, by default, accepts it.\n\nFails if no alert is present. If `text` is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with [Handle Alert](#Handle%20Alert).\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default [timeout](#Timeout) is used instead.\n\n`action` and `timeout` arguments are new in SeleniumLibrary 3.0. In earlier versions the alert was always accepted and timeout was hard coded to one second."
        },
        {
            "name": "Alert Should Not Be Present",
            "args": [
                "action=ACCEPT",
                "timeout=0"
            ],
            "doc": "Verifies that no alert is present.\n\nIf the alert actually exists, the `action` argument determines how it should be handled. By default the alert is accepted, but it can be also dismissed or left open the same way as with the [Handle Alert](#Handle%20Alert) keyword.\n\n`timeout` specifies how long to wait for the alert to appear. By default the alert is not waited at all, but a custom time can be given if alert may be delayed. See the [time format](#Time%20format) section for information about the syntax.\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Assign Id To Element",
            "args": [
                "locator",
                "id"
            ],
            "doc": "Assigns temporary `id` to element specified by `locator`.\n\nThis is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nExample:\n\n```\nAssign ID to Element  //ul[@class='example' and ./li[contains(., 'Stuff')]]  my id\nPage Should Contain Element  my id  \n```"
        },
        {
            "name": "Capture Page Screenshot",
            "args": [
                "filename=selenium-screenshot-{index}.png"
            ],
            "doc": "Takes screenshot of the current page and embeds it into log file.\n\n`filename` argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when [importing](#Importing) the library or by using the [Set Screenshot Directory](#Set%20Screenshot%20Directory) keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.\n\nStarting from SeleniumLibrary 1.8, if `filename` contains marker `{index}`, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's [format string syntax](https://docs.python.org/2/library/string.html#formatstrings).\n\nAn absolute path to the created screenshot file is returned.\n\nExamples:\n\n```\nCapture Page Screenshot  \nFile Should Exist  ${OUTPUTDIR}/selenium-screenshot-1.png\n${path} =  Capture Page Screenshot\nFile Should Exist  ${OUTPUTDIR}/selenium-screenshot-2.png\nFile Should Exist  ${path}\nCapture Page Screenshot  custom_name.png\nFile Should Exist  ${OUTPUTDIR}/custom_name.png\nCapture Page Screenshot  custom_with_index_{index}.png\nFile Should Exist  ${OUTPUTDIR}/custom_with_index_1.png\nCapture Page Screenshot  formatted_index_{index:03}.png\nFile Should Exist  ${OUTPUTDIR}/formatted_index_001.png\n```"
        },
        {
            "name": "Checkbox Should Be Selected",
            "args": [
                "locator"
            ],
            "doc": "Verifies checkbox `locator` is selected/checked.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Checkbox Should Not Be Selected",
            "args": [
                "locator"
            ],
            "doc": "Verifies checkbox `locator` is not selected/checked.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.."
        },
        {
            "name": "Choose Cancel On Next Confirmation",
            "args": [],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Handle Alert](#Handle%20Alert) directly instead.\n\nIn versions prior to SeleniumLibrary 3.0, the alert handling approach needed to be set separately before using the [Confirm Action](#Confirm%20Action) keyword. New [Handle Alert](#Handle%20Alert) keyword accepts the action how to handle the alert as a normal argument and should be used instead."
        },
        {
            "name": "Choose File",
            "args": [
                "locator",
                "file_path"
            ],
            "doc": "Inputs the `file_path` into file input field `locator`.\n\nThis keyword is most often used to input files into upload forms. The file specified with `file_path` must be available on machine where tests are executed.\n\nExample:\n\n```\nChoose File  my_upload_field  ${CURDIR}/trades.csv\n```"
        },
        {
            "name": "Choose Ok On Next Confirmation",
            "args": [],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Handle Alert](#Handle%20Alert) directly instead.\n\nIn versions prior to SeleniumLibrary 3.0, the alert handling approach needed to be set separately before using the [Confirm Action](#Confirm%20Action) keyword. New [Handle Alert](#Handle%20Alert) keyword accepts the action how to handle the alert as a normal argument and should be used instead."
        },
        {
            "name": "Clear Element Text",
            "args": [
                "locator"
            ],
            "doc": "Clears the value of text entry element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Click Button",
            "args": [
                "locator"
            ],
            "doc": "Clicks button identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name` and `value`."
        },
        {
            "name": "Click Element",
            "args": [
                "locator",
                "modifier=False"
            ],
            "doc": "Click element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `modifier` argument can be used to pass [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys) when clicking the element. The + can be used as a separator for different Selenium Keys. The CTRL is internally translated to CONTROL key. The `modifier` is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to [ALT key](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT) . If `modifier` does not match to Selenium Keys, keyword fails.\n\nExample:\n\n```\nClick Element  id:button    # Would click element without any modifiers.\nClick Element  id:button  CTRL  # Would click element with CTLR key pressed down.\nClick Element  id:button  CTRL+ALT  # Would click element with CTLR and ALT keys pressed down.\n```\n\nThe `modifier` argument is new in SeleniumLibrary 3.2"
        },
        {
            "name": "Click Element At Coordinates",
            "args": [
                "locator",
                "xoffset",
                "yoffset"
            ],
            "doc": "Click element `locator` at `xoffset/yoffset`.\n\nCursor is moved and the center of the element and x/y coordinates are calculated from that point.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Click Image",
            "args": [
                "locator"
            ],
            "doc": "Clicks an image identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`."
        },
        {
            "name": "Click Link",
            "args": [
                "locator"
            ],
            "doc": "Clicks a link identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text."
        },
        {
            "name": "Close All Browsers",
            "args": [],
            "doc": "Closes all open browsers and resets the browser cache.\n\nAfter this keyword new indexes returned from [Open Browser](#Open%20Browser) keyword are reset to 1.\n\nThis keyword should be used in test or suite teardown to make sure all browsers are closed."
        },
        {
            "name": "Close Browser",
            "args": [],
            "doc": "Closes the current browser."
        },
        {
            "name": "Close Window",
            "args": [],
            "doc": "Closes currently opened pop-up window."
        },
        {
            "name": "Confirm Action",
            "args": [],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Handle Alert](#Handle%20Alert) instead.\n\nBy default accepts an alert, but this behavior can be altered with [Choose Cancel On Next Confirmation](#Choose%20Cancel%20On%20Next%20Confirmation) and [Choose Ok On Next Confirmation](#Choose%20Ok%20On%20Next%20Confirmation) keywords. New [Handle Alert](#Handle%20Alert) keyword accepts the action how to handle the alert as a normal argument and should be used instead."
        },
        {
            "name": "Create Webdriver",
            "args": [
                "driver_name",
                "alias=None",
                "kwargs={}",
                "**init_kwargs"
            ],
            "doc": "Creates an instance of Selenium WebDriver.\n\nLike [Open Browser](#Open%20Browser), but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if functionality provided by [Open Browser](#Open%20Browser) is not adequate.\n\n`driver_name` must be an WebDriver implementation name like Firefox, Chrome, Ie, Opera, Safari, PhantomJS, or Remote.\n\nThe initialized WebDriver can be configured either with a Python dictionary `kwargs` or by using keyword arguments `**init_kwargs`. These arguments are passed directly to WebDriver without any processing. See [Selenium API documentation](https://seleniumhq.github.io/selenium/docs/api/py/api.html) for details about the supported arguments.\n\nExamples:\n\n```\n# Use proxy with Firefox      \n${proxy}=  Evaluate  sys.modules['selenium.webdriver'].Proxy()  sys, selenium.webdriver\n${proxy.http_proxy}=  Set Variable  localhost:8888  \nCreate Webdriver  Firefox  proxy=${proxy}  \n# Use proxy with PhantomJS      \n${service args}=  Create List  --proxy=192.168.132.104:8888  \nCreate Webdriver  PhantomJS  service_args=${service args}  \n```\n\nReturns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when [Close All Browsers](#Close%20All%20Browsers) keyword is used. See [Switch Browser](#Switch%20Browser) for an example."
        },
        {
            "name": "Current Frame Contains",
            "args": [
                "text",
                "loglevel=INFO"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Current Frame Should Contain](#Current%20Frame%20Should%20Contain) instead."
        },
        {
            "name": "Current Frame Should Contain",
            "args": [
                "text",
                "loglevel=INFO"
            ],
            "doc": "Verifies that current frame contains `text`.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about the `loglevel` argument.\n\nPrior to SeleniumLibrary 3.0 this keyword was named [Current Frame Contains](#Current%20Frame%20Contains)."
        },
        {
            "name": "Current Frame Should Not Contain",
            "args": [
                "text",
                "loglevel=INFO"
            ],
            "doc": "Verifies that current frame does not contains `text`.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about the `loglevel` argument."
        },
        {
            "name": "Delete All Cookies",
            "args": [],
            "doc": "Deletes all cookies."
        },
        {
            "name": "Delete Cookie",
            "args": [
                "name"
            ],
            "doc": "Deletes cookie matching `name`.\n\nIf the cookie is not found, nothing happens."
        },
        {
            "name": "Dismiss Alert",
            "args": [
                "accept=True"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Handle Alert](#Handle%20Alert) instead.\n\nContrary to its name, this keyword accepts the alert by default (i.e. presses `Ok`). `accept` can be set to a false value to dismiss the alert (i.e. to press `Cancel`).\n\n[Handle Alert](#Handle%20Alert) has better support for controlling should the alert be accepted, dismissed, or left open."
        },
        {
            "name": "Double Click Element",
            "args": [
                "locator"
            ],
            "doc": "Double click element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Drag And Drop",
            "args": [
                "locator",
                "target"
            ],
            "doc": "Drags element identified by `locator` into `target` element.\n\nThe `locator` argument is the locator of the dragged element and the `target` is the locator of the target. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nExample:\n\n```\nDrag And Drop  css:div#element  css:div.target\n```"
        },
        {
            "name": "Drag And Drop By Offset",
            "args": [
                "locator",
                "xoffset",
                "yoffset"
            ],
            "doc": "Drags element identified with `locator` by `xoffset/yoffset`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nElement will be moved by `xoffset` and `yoffset`, each of which is a negative or positive number specifying the offset.\n\nExample:\n\n```\nDrag And Drop By Offset  myElem  50  -35  # Move myElem 50px right and 35px down\n```"
        },
        {
            "name": "Element Attribute Value Should Be",
            "args": [
                "locator",
                "attribute",
                "expected",
                "message=None"
            ],
            "doc": "Verifies element identified by `locator` contains expected attribute value.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nExample: [Element Attribute Value Should Be](#Element%20Attribute%20Value%20Should%20Be) | css:img | href | value\n\nNew in SeleniumLibrary 3.2."
        },
        {
            "name": "Element Should Be Disabled",
            "args": [
                "locator"
            ],
            "doc": "Verifies that element identified with `locator` is disabled.\n\nThis keyword considers also elements that are read-only to be disabled.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Element Should Be Enabled",
            "args": [
                "locator"
            ],
            "doc": "Verifies that element identified with `locator` is enabled.\n\nThis keyword considers also elements that are read-only to be disabled.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Element Should Be Focused",
            "args": [
                "locator"
            ],
            "doc": "Verifies that element identified with `locator` is focused.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Element Should Be Visible",
            "args": [
                "locator",
                "message=None"
            ],
            "doc": "Verifies that the element identified by `locator` is visible.\n\nHerein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries `display:none` is not logically visible, so using this keyword on that element would fail.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message."
        },
        {
            "name": "Element Should Contain",
            "args": [
                "locator",
                "expected",
                "message=None",
                "ignore_case=False"
            ],
            "doc": "Verifies that element `locator` contains text `expected`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.\n\n`ignore_case` argument new in SeleniumLibrary 3.1.\n\nUse [Element Text Should Be](#Element%20Text%20Should%20Be) if you want to match the exact text, not a substring."
        },
        {
            "name": "Element Should Not Be Visible",
            "args": [
                "locator",
                "message=None"
            ],
            "doc": "Verifies that the element identified by `locator` is NOT visible.\n\nPasses if element does not exists. See [Element Should Be Visible](#Element%20Should%20Be%20Visible) for more information about visibility and supported arguments."
        },
        {
            "name": "Element Should Not Contain",
            "args": [
                "locator",
                "expected",
                "message=None",
                "ignore_case=False"
            ],
            "doc": "Verifies that element `locator` does not contains text `expected`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n`ignore_case` argument new in SeleniumLibrary 3.1."
        },
        {
            "name": "Element Text Should Be",
            "args": [
                "locator",
                "expected",
                "message=None",
                "ignore_case=False"
            ],
            "doc": "Verifies that element `locator` contains exact text `expected`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n`ignore_case` argument new in SeleniumLibrary 3.1.\n\nUse [Element Should Contain](#Element%20Should%20Contain) if a substring match is desired."
        },
        {
            "name": "Element Text Should Not Be",
            "args": [
                "locator",
                "not_expected",
                "message=None",
                "ignore_case=False"
            ],
            "doc": "Verifies that element `locator` does not contain exact text `not_expected`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\nNew in SeleniumLibrary 3.1.1"
        },
        {
            "name": "Execute Async Javascript",
            "args": [
                "*code"
            ],
            "doc": "Executes asynchronous JavaScript code with possible arguments.\n\nSimilar to [Execute Javascript](#Execute%20Javascript) except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.\n\nScripts must complete within the script timeout or this keyword will fail. See the Timeouts section for more information.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script) as part of `code` argument. See [Execute Javascript](#Execute%20Javascript) for more details.\n\nExamples:\n\n```\nExecute Async JavaScript  var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);  \nExecute Async JavaScript  ${CURDIR}/async_js_to_execute.js  \n${result} =  Execute Async JavaScript  \n...  var callback = arguments[arguments.length - 1];  \n...  function answer(){callback(\"text\");};  \n...  window.setTimeout(answer, 2000);  \nShould Be Equal  ${result}  text\n```"
        },
        {
            "name": "Execute Javascript",
            "args": [
                "*code"
            ],
            "doc": "Executes the given JavaScript code with possible arguments.\n\n`code` may be divided into multiple cells in the test data and `code` may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from `code`.\n\nIf `code` is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.\n\nThe JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use `window` to refer to the window of your application and `document` to refer to the document object of the current frame or window, e.g. `document.getElementById('example')`.\n\nThis keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script) as part of `code` argument. The JavaScript code and arguments must be separated with JAVASCRIPT and ARGUMENTS markers and must used exactly with this format. If the Javascript code is first, then the JAVASCRIPT marker is optional. The order of JAVASCRIPT and ARGUMENTS markers can swapped, but if ARGUMENTS is first marker, then JAVASCRIPT marker is mandatory. It is only allowed to use JAVASCRIPT and ARGUMENTS markers only one time in the `code` argument.\n\nExamples:\n\n```\nExecute JavaScript  window.myFunc('arg1', 'arg2')      \nExecute JavaScript  ${CURDIR}/js_to_execute.js      \nExecute JavaScript  alert(arguments[0]);  ARGUMENTS  123  \nExecute JavaScript  ARGUMENTS  123  JAVASCRIPT  alert(arguments[0]);\n```"
        },
        {
            "name": "Focus",
            "args": [
                "locator"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Set Focus To Element](#Set%20Focus%20To%20Element) instead."
        },
        {
            "name": "Frame Should Contain",
            "args": [
                "locator",
                "text",
                "loglevel=INFO"
            ],
            "doc": "Verifies that frame identified by `locator` contains `text`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about the `loglevel` argument."
        },
        {
            "name": "Get Alert Message",
            "args": [
                "dismiss=True"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Handle Alert](#Handle%20Alert) instead.\n\nReturns the message the alert has. Dismisses the alert by default (i.e. presses `Cancel`) and setting `dismiss` to false leaves the alert open. There is no support to accept the alert (i.e. to press `Ok`).\n\n[Handle Alert](#Handle%20Alert) has better support for controlling should the alert be accepted, dismissed, or left open."
        },
        {
            "name": "Get All Links",
            "args": [],
            "doc": "Returns a list containing ids of all links found in current page.\n\nIf a link has no id, an empty string will be in the list instead."
        },
        {
            "name": "Get Cookie",
            "args": [
                "name"
            ],
            "doc": "Returns information of cookie with `name` as an object.\n\nIf no cookie is found with `name`, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.\n\n```\nAttribute  Explanation\nname  The name of a cookie.\nvalue  Value of the cookie.\npath  Indicates a URL path, for example /.\ndomain  The domain the cookie is visible to.\nsecure  When true, cookie is only used with HTTPS connections.\nhttpOnly  When true, cookie is not accessible via JavaScript.\nexpiry  Python datetime object indicating when the cookie expires.\n```\n\nSee the [WebDriver specification](https://w3c.github.io/webdriver/webdriver-spec.html#cookies) for details about the cookie information. Notice that `expiry` is specified as a [datetime object](https://docs.python.org/3/library/datetime.html#datetime.datetime), not as seconds since Unix Epoch like WebDriver natively does.\n\nExample:\n\n```\nAdd Cookie  foo  bar\n${cookie} =  Get Cookie  foo\nShould Be Equal  ${cookie.name}  bar\nShould Be Equal  ${cookie.value}  foo\nShould Be True  ${cookie.expiry.year} > 2017  \n```\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Get Cookie Value",
            "args": [
                "name"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Get Cookie](#Get%20Cookie) instead."
        },
        {
            "name": "Get Cookies",
            "args": [],
            "doc": "Returns all cookies of the current page.\n\nThe cookie information is returned as a single string in format `name1=value1; name2=value2; name3=value3`. It can be used, for example, for logging purposes or in headers when sending HTTP requests."
        },
        {
            "name": "Get Element Attribute",
            "args": [
                "locator",
                "attribute"
            ],
            "doc": "Returns value of `attribute` from element `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nExample:\n\n```\n${id}=  Get Element Attribute  css:h1  id\n```\n\nPassing attribute name as part of the `locator` was removed in SeleniumLibrary 3.2. The explicit `attribute` argument should be used instead."
        },
        {
            "name": "Get Element Count",
            "args": [
                "locator"
            ],
            "doc": "Returns number of elements matching `locator`.\n\nIf you wish to assert the number of matching elements, use [Page Should Contain Element](#Page%20Should%20Contain%20Element) with `limit` argument. Keyword will always return an integer.\n\nExample:\n\n```\n${count} =  Get Element Count  name:div_name\nShould Be True  ${count} > 2  \n```\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Get Element Size",
            "args": [
                "locator"
            ],
            "doc": "Returns width and height of element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nBoth width and height are returned as integers.\n\nExample:\n\n```\n${width}  ${height} =  Get Element Size  css:div#container\n```"
        },
        {
            "name": "Get Horizontal Position",
            "args": [
                "locator"
            ],
            "doc": "Returns horizontal position of element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe position is returned in pixels off the left side of the page, as an integer.\n\nSee also [Get Vertical Position](#Get%20Vertical%20Position)."
        },
        {
            "name": "Get List Items",
            "args": [
                "locator",
                "values=False"
            ],
            "doc": "Returns all labels or values of selection list `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nReturns visible labels by default, but values can be returned by setting the `values` argument to a true value (see [Boolean arguments](#Boolean%20arguments)).\n\nExample:\n\n```\n${labels} =  Get List Items  mylist  \n${values} =  Get List Items  css:#example select  values=True\n```\n\nSupport to return values is new in SeleniumLibrary 3.0."
        },
        {
            "name": "Get Location",
            "args": [],
            "doc": "Returns the current browser URL."
        },
        {
            "name": "Get Locations",
            "args": [],
            "doc": "Returns and logs URLs of all known browser windows."
        },
        {
            "name": "Get Matching Xpath Count",
            "args": [
                "xpath",
                "return_str=True"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Get Element Count](#Get%20Element%20Count) instead."
        },
        {
            "name": "Get Selected List Label",
            "args": [
                "locator"
            ],
            "doc": "Returns label of selected option from selection list `locator`.\n\nIf there are multiple selected options, label of the first option is returned.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get Selected List Labels",
            "args": [
                "locator"
            ],
            "doc": "Returns labels of selected options from selection list `locator`.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions this caused an error.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get Selected List Value",
            "args": [
                "locator"
            ],
            "doc": "Returns value of selected option from selection list `locator`.\n\nIf there are multiple selected options, value of the first option is returned.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get Selected List Values",
            "args": [
                "locator"
            ],
            "doc": "Returns values of selected options from selection list `locator`.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions this caused an error.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get Selenium Implicit Wait",
            "args": [],
            "doc": "Gets the implicit wait value used by Selenium.\n\nThe value is returned as a human readable string like `1 second`.\n\nSee the [Implicit wait](#Implicit%20wait) section above for more information."
        },
        {
            "name": "Get Selenium Speed",
            "args": [],
            "doc": "Gets the delay that is waited after each Selenium command.\n\nThe value is returned as a human readable string like `1 second`.\n\nSee the [Selenium Speed](#Selenium%20speed) section above for more information."
        },
        {
            "name": "Get Selenium Timeout",
            "args": [],
            "doc": "Gets the timeout that is used by various keywords.\n\nThe value is returned as a human readable string like `1 second`.\n\nSee the [Timeout](#Timeout) section above for more information."
        },
        {
            "name": "Get Session Id",
            "args": [],
            "doc": "Returns the currently active browser session id.\n\nNew in SeleniumLibrary 3.2"
        },
        {
            "name": "Get Source",
            "args": [],
            "doc": "Returns the entire HTML source of the current page or frame."
        },
        {
            "name": "Get Table Cell",
            "args": [
                "locator",
                "row",
                "column",
                "loglevel=INFO"
            ],
            "doc": "Returns contents of table cell.\n\nThe table is located using the `locator` argument and its cell found using `row` and `column`. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nBoth row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.\n\nAll `<th>` and `<td>` elements anywhere in the table are considered to be cells.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about the `loglevel` argument."
        },
        {
            "name": "Get Text",
            "args": [
                "locator"
            ],
            "doc": "Returns the text value of element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get Title",
            "args": [],
            "doc": "Returns the title of current page."
        },
        {
            "name": "Get Value",
            "args": [
                "locator"
            ],
            "doc": "Returns the value attribute of element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get Vertical Position",
            "args": [
                "locator"
            ],
            "doc": "Returns vertical position of element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe position is returned in pixels off the top of the page, as an integer.\n\nSee also [Get Horizontal Position](#Get%20Horizontal%20Position)."
        },
        {
            "name": "Get WebElement",
            "args": [
                "locator"
            ],
            "doc": "Returns the first WebElement matching the given `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Get WebElements",
            "args": [
                "locator"
            ],
            "doc": "Returns list of WebElement objects matching the `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nStarting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases the keyword failed in this case."
        },
        {
            "name": "Get Window Handles",
            "args": [],
            "doc": "Return all current window handles as a list.\n\nCan be used as a list of windows to exclude with [Select Window](#Select%20Window).\n\nPrior to SeleniumLibrary 3.0, this keyword was named [List Windows](#List%20Windows)."
        },
        {
            "name": "Get Window Identifiers",
            "args": [],
            "doc": "Returns and logs id attributes of all known browser windows."
        },
        {
            "name": "Get Window Names",
            "args": [],
            "doc": "Returns and logs names of all known browser windows."
        },
        {
            "name": "Get Window Position",
            "args": [],
            "doc": "Returns current window position.\n\nPosition is relative to the top left corner of the screen. Returned values are integers. See also [Set Window Position](#Set%20Window%20Position).\n\nExample:\n\n```\n${x}  ${y}=  Get Window Position\n```"
        },
        {
            "name": "Get Window Size",
            "args": [],
            "doc": "Returns current window width and height as integers.\n\nSee also [Set Window Size](#Set%20Window%20Size).\n\nExample:\n\n```\n${width}  ${height}=  Get Window Size\n```"
        },
        {
            "name": "Get Window Titles",
            "args": [],
            "doc": "Returns and logs titles of all known browser windows."
        },
        {
            "name": "Go Back",
            "args": [],
            "doc": "Simulates the user clicking the back button on their browser."
        },
        {
            "name": "Go To",
            "args": [
                "url"
            ],
            "doc": "Navigates the active browser instance to the provided `url`."
        },
        {
            "name": "Handle Alert",
            "args": [
                "action=ACCEPT",
                "timeout=None"
            ],
            "doc": "Handles the current alert and returns its message.\n\nBy default the alert is accepted, but this can be controlled with the `action` argument that supports the following case-insensitive values:\n\n*   `ACCEPT`: Accept the alert i.e. press `Ok`. Default.\n*   `DISMISS`: Dismiss the alert i.e. press `Cancel`.\n*   `LEAVE`: Leave the alert open.\n\nThe `timeout` argument specifies how long to wait for the alert to appear. If it is not given, the global default [timeout](#Timeout) is used instead.\n\nExamples:\n\n```\nHandle Alert      # Accept alert.\nHandle Alert  action=DISMISS    # Dismiss alert.\nHandle Alert  timeout=10 s    # Use custom timeout and accept alert.\nHandle Alert  DISMISS  1 min  # Use custom timeout and dismiss alert.\n${message} =  Handle Alert    # Accept alert and get its message.\n${message} =  Handle Alert  LEAVE  # Leave alert open and get its message.\n```\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Input Password",
            "args": [
                "locator",
                "password"
            ],
            "doc": "Types the given password into text field identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nDifference compared to [Input Text](#Input%20Text) is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like\n\n```\nInput Password  password_field  password\n```\n\nthe password is shown as a normal keyword argument. A way to avoid that is using variables like\n\n```\nInput Password  password_field  ${PASSWORD}\n```\n\nNotice also that SeleniumLibrary logs all the communication with browser drivers using the DEBUG level, and the actual password can be seen there. Additionally Robot Framework logs all arguments using the TRACE level. Tests must thus not be executed using level below INFO if password should not be logged in any format."
        },
        {
            "name": "Input Text",
            "args": [
                "locator",
                "text"
            ],
            "doc": "Types the given `text` into text field identified by `locator`.\n\nUse [Input Password](#Input%20Password) if you do not want the given `text` to be logged.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Input Text Into Alert",
            "args": [
                "text",
                "action=ACCEPT",
                "timeout=None"
            ],
            "doc": "Types the given `text` into an input field in an alert.\n\nThe alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with [Handle Alert](#Handle%20Alert).\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default [timeout](#Timeout) is used instead.\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Input Text Into Prompt",
            "args": [
                "text"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Input Text Into Alert](#Input%20Text%20Into%20Alert) instead.\n\nTypes the given `text` into an input field in an alert. Leaves the alert open."
        },
        {
            "name": "List Selection Should Be",
            "args": [
                "locator",
                "*expected"
            ],
            "doc": "Verifies selection list `locator` has `expected` options selected.\n\nIt is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.\n\nIf no expected options are given, validates that the list has no selections. A more explicit alternative is using [List Should Have No Selections](#List%20Should%20Have%20No%20Selections).\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nExamples:\n\n```\nList Selection Should Be  gender  Female  \nList Selection Should Be  interests  Test Automation  Python\n```"
        },
        {
            "name": "List Should Have No Selections",
            "args": [
                "locator"
            ],
            "doc": "Verifies selection list `locator` has no options selected.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "List Windows",
            "args": [],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Get Window Handles](#Get%20Window%20Handles) instead."
        },
        {
            "name": "Location Should Be",
            "args": [
                "url",
                "message=None"
            ],
            "doc": "Verifies that current URL is exactly \\`url.\n\nThe `url` argument contains the exact url that should exist in browser.\n\nThe `message` argument can be used to override the default error message.\n\n`message` argument new in SeleniumLibrary 3.2.0."
        },
        {
            "name": "Location Should Contain",
            "args": [
                "expected",
                "message=None"
            ],
            "doc": "Verifies that current URL contains `expected`.\n\nThe `url` argument contains the expected value in url.\n\nThe `message` argument can be used to override the default error message.\n\n`message` argument new in SeleniumLibrary 3.2.0."
        },
        {
            "name": "Locator Should Match X Times",
            "args": [
                "locator",
                "x",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Deprecated, use [Page Should Contain Element](#Page%20Should%20Contain%20Element) with `limit` argument instead."
        },
        {
            "name": "Log Location",
            "args": [],
            "doc": "Logs and returns the current URL."
        },
        {
            "name": "Log Source",
            "args": [
                "loglevel=INFO"
            ],
            "doc": "Logs and returns the HTML source of the current page or frame.\n\nThe `loglevel` argument defines the used log level. Valid log levels are `WARN`, `INFO` (default), `DEBUG`, and `NONE` (no logging)."
        },
        {
            "name": "Log Title",
            "args": [],
            "doc": "Logs and returns the title of current page."
        },
        {
            "name": "Maximize Browser Window",
            "args": [],
            "doc": "Maximizes current browser window."
        },
        {
            "name": "Mouse Down",
            "args": [
                "locator"
            ],
            "doc": "Simulates pressing the left mouse button on the element `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe element is pressed without releasing the mouse button.\n\nSee also the more specific keywords [Mouse Down On Image](#Mouse%20Down%20On%20Image) and [Mouse Down On Link](#Mouse%20Down%20On%20Link)."
        },
        {
            "name": "Mouse Down On Image",
            "args": [
                "locator"
            ],
            "doc": "Simulates a mouse down event on an image identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`."
        },
        {
            "name": "Mouse Down On Link",
            "args": [
                "locator"
            ],
            "doc": "Simulates a mouse down event on a link identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text."
        },
        {
            "name": "Mouse Out",
            "args": [
                "locator"
            ],
            "doc": "Simulates moving mouse away from the element `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Mouse Over",
            "args": [
                "locator"
            ],
            "doc": "Simulates hovering mouse over the element `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Mouse Up",
            "args": [
                "locator"
            ],
            "doc": "Simulates releasing the left mouse button on the element `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Open Browser",
            "args": [
                "url",
                "browser=firefox",
                "alias=None",
                "remote_url=False",
                "desired_capabilities=None",
                "ff_profile_dir=None"
            ],
            "doc": "Opens a new browser instance to the given `url`.\n\nThe `browser` argument specifies which browser to use, and the supported browser are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.\n\n```\nBrowser  Name(s)\nFirefox  firefox, ff\nGoogle Chrome  googlechrome, chrome, gc\nHeadless Firefox  headlessfirefox\nHeadless Chrome  headlesschrome\nInternet Explorer  internetexplorer, ie\nEdge  edge\nSafari  safari\nOpera  opera\nAndroid  android\nIphone  iphone\nPhantomJS  phantomjs\nHTMLUnit  htmlunit\nHTMLUnit with Javascript  htmlunitwithjs\n```\n\nTo be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the [project documentation](https://github.com/robotframework/SeleniumLibrary#browser-drivers) for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.\n\nOptional `alias` is an alias given for this browser instance and it can be used for switching between browsers. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when [Close All Browsers](#Close%20All%20Browsers) is called. See [Switch Browser](#Switch%20Browser) for more information and examples.\n\nOptional `remote_url` is the URL for a [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2).\n\nOptional `desired_capabilities` can be used to configure, for example, logging preferences for a browser or a browser and operating system when using [Sauce Labs](http://saucelabs.com). Desired capabilities can be given either as a Python dictionary or as a string in format `key1:value1,key2:value2`. [Selenium documentation](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities) lists possible capabilities that can be enabled.\n\nOptional `ff_profile_dir` is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default.\n\nExamples:\n\n```\nOpen Browser  http://example.com  Chrome  \nOpen Browser  http://example.com  Firefox  alias=Firefox\nOpen Browser  http://example.com  Edge  remote_url=http://127.0.0.1:4444/wd/hub\n```\n\nIf the provided configuration options are not enough, it is possible to use [Create Webdriver](#Create%20Webdriver) to customize browser initialization even more.\n\nApplying `desired_capabilities` argument also for local browser is new in SeleniumLibrary 3.1."
        },
        {
            "name": "Open Context Menu",
            "args": [
                "locator"
            ],
            "doc": "Opens context menu on element identified by `locator`."
        },
        {
            "name": "Page Should Contain",
            "args": [
                "text",
                "loglevel=INFO"
            ],
            "doc": "Verifies that current page contains `text`.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional `loglevel` argument. Valid log levels are `DEBUG`, `INFO` (default), `WARN`, and `NONE`. If the log level is `NONE` or below the current active log level the source will not be logged."
        },
        {
            "name": "Page Should Contain Button",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies button `locator` is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name` and `value`."
        },
        {
            "name": "Page Should Contain Checkbox",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies checkbox `locator` is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Page Should Contain Element",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO",
                "limit=None"
            ],
            "doc": "Verifies that element `locator` is found on the current page.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is `None` (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about the `loglevel` argument.\n\nExamples assumes that locator matches to two elements.\n\n```\nPage Should Contain Element  div_name  limit=1  # Keyword fails.\nPage Should Contain Element  div_name  limit=2  # Keyword passes.\nPage Should Contain Element  div_name  limit=none  # None is considered one or more.\nPage Should Contain Element  div_name    # Same as above.\n```\n\nThe `limit` argument is new in SeleniumLibrary 3.0."
        },
        {
            "name": "Page Should Contain Image",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies image identified by `locator` is found from current page.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments."
        },
        {
            "name": "Page Should Contain Link",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies link identified by `locator` is found from current page.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments."
        },
        {
            "name": "Page Should Contain List",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies selection list `locator` is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Page Should Contain Radio Button",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies radio button `locator` is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`."
        },
        {
            "name": "Page Should Contain Textfield",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies text field `locator` is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Page Should Not Contain",
            "args": [
                "text",
                "loglevel=INFO"
            ],
            "doc": "Verifies the current page does not contain `text`.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about the `loglevel` argument."
        },
        {
            "name": "Page Should Not Contain Button",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies button `locator` is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name` and `value`."
        },
        {
            "name": "Page Should Not Contain Checkbox",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies checkbox `locator` is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Page Should Not Contain Element",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies that element `locator` is found on the current page.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about `message` and `loglevel` arguments."
        },
        {
            "name": "Page Should Not Contain Image",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies image identified by `locator` is found from current page.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments."
        },
        {
            "name": "Page Should Not Contain Link",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies link identified by `locator` is not found from current page.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments."
        },
        {
            "name": "Page Should Not Contain List",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies selection list `locator` is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Page Should Not Contain Radio Button",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies radio button `locator` is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`."
        },
        {
            "name": "Page Should Not Contain Textfield",
            "args": [
                "locator",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "Verifies text field `locator` is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about `message` and `loglevel` arguments.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Press Key",
            "args": [
                "locator",
                "key"
            ],
            "doc": "Simulates user pressing key on element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`key` is either a single character, a string, or a numerical ASCII code of the key lead by '\\\\\\\\'.\n\nExamples:\n\n```\nPress Key  text_field  q  \nPress Key  text_field  abcde  \nPress Key  login_button  \\\\13  # ASCII code for enter key\n```"
        },
        {
            "name": "Radio Button Should Be Set To",
            "args": [
                "group_name",
                "value"
            ],
            "doc": "Verifies radio button group `group_name` is set to `value`.\n\n`group_name` is the `name` of the radio button group."
        },
        {
            "name": "Radio Button Should Not Be Selected",
            "args": [
                "group_name"
            ],
            "doc": "Verifies radio button group `group_name` has no selection.\n\n`group_name` is the `name` of the radio button group."
        },
        {
            "name": "Register Keyword To Run On Failure",
            "args": [
                "keyword"
            ],
            "doc": "Sets the keyword to execute when a SeleniumLibrary keyword fails.\n\n`keyword` is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.\n\nThe initial keyword to use is set when [importing](#Importing) the library, and the keyword that is used by default is [Capture Page Screenshot](#Capture%20Page%20Screenshot). Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.\n\nIt is possible to use string `NOTHING` or `NONE`, case-insensitively, as well as Python `None` to disable this feature altogether.\n\nThis keyword returns the name of the previously registered failure keyword or Python `None` if this functionality was previously disabled. The return value can be always used to restore the original value later.\n\nExample:\n\n```\nRegister Keyword To Run On Failure  Log Source  \n${previous kw}=  Register Keyword To Run On Failure  NONE\nRegister Keyword To Run On Failure  ${previous kw}  \n```\n\nChanges in SeleniumLibrary 3.0:\n\n*   Possible to use string `NONE` or Python `None` to disable the functionality.\n*   Return Python `None` when the functionality was disabled earlier. In previous versions special value `No Keyword` was returned and it could not be used to restore the original state."
        },
        {
            "name": "Reload Page",
            "args": [],
            "doc": "Simulates user reloading page."
        },
        {
            "name": "Remove Location Strategy",
            "args": [
                "strategy_name"
            ],
            "doc": "Removes a previously added custom location strategy.\n\nSee [Custom locators](#Custom%20locators) for information how to create and use custom strategies."
        },
        {
            "name": "Scroll Element Into View",
            "args": [
                "locator"
            ],
            "doc": "Scrolls an element identified by `locator` into view.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.2.0"
        },
        {
            "name": "Select All From List",
            "args": [
                "locator"
            ],
            "doc": "Selects all options from multi-selection list `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Select Checkbox",
            "args": [
                "locator"
            ],
            "doc": "Selects checkbox identified by `locator`.\n\nDoes nothing if checkbox is already selected.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Select Frame",
            "args": [
                "locator"
            ],
            "doc": "Sets frame identified by `locator` as the current frame.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nWorks both with frames and iframes. Use [Unselect Frame](#Unselect%20Frame) to cancel the frame selection and return to the main frame.\n\nExample:\n\n```\nSelect Frame  top-frame  # Select frame with id or name 'top-frame'\nClick Link  example  # Click link 'example' in the selected frame\nUnselect Frame    # Back to main frame.\nSelect Frame  //iframe[@name='xxx']  # Select frame using xpath\n```"
        },
        {
            "name": "Select From List",
            "args": [
                "locator",
                "*options"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use Select From List By Label/Value/Index instead.\n\nThis keyword selects options based on labels or values, which makes it very complicated and slow. It has been deprecated in SeleniumLibrary 3.0, and dedicated keywords [Select From List By Label](#Select%20From%20List%20By%20Label), [Select From List By Value](#Select%20From%20List%20By%20Value) and [Select From List By Index](#Select%20From%20List%20By%20Index) should be used instead."
        },
        {
            "name": "Select From List By Index",
            "args": [
                "locator",
                "*indexes"
            ],
            "doc": "Selects options from selection list `locator` by `indexes`.\n\nIndexes of list options start from 0.\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Select From List By Label",
            "args": [
                "locator",
                "*labels"
            ],
            "doc": "Selects options from selection list `locator` by `labels`.\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Select From List By Value",
            "args": [
                "locator",
                "*values"
            ],
            "doc": "Selects options from selection list `locator` by `values`.\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Select Radio Button",
            "args": [
                "group_name",
                "value"
            ],
            "doc": "Sets radio button group `group_name` to `value`.\n\nThe radio button to be selected is located by two arguments:\n\n*   `group_name` is the name of the radio button group.\n*   `value` is the `id` or `value` attribute of the actual radio button.\n\nExamples:\n\n```\nSelect Radio Button  size  XL\nSelect Radio Button  contact  email\n```"
        },
        {
            "name": "Select Window",
            "args": [
                "locator=MAIN",
                "timeout=None"
            ],
            "doc": "Selects browser window matching `locator`.\n\nIf the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous window handle is returned, and can be used to return back to it later.\n\nNotice that in this context _window_ means a pop-up window opened when doing something on an existing window. It is not possible to select windows opened with [Open Browser](#Open%20Browser), [Switch Browser](#Switch%20Browser) must be used instead. Notice also that alerts should be handled with [Handle Alert](#Handle%20Alert) or other alert related keywords.\n\nThe `locator` can be specified using different strategies somewhat similarly as when [locating elements](#Locating%20elements) on pages.\n\n*   By default the `locator` is matched against window handle, name, title, and URL. Matching is done in that order and the the first matching window is selected.\n\n*   The `locator` can specify an explicit strategy by using format `strategy:value` (recommended) or `strategy=value`. Supported strategies are `name`, `title` and `url`, which match windows using name, title, and URL, respectively. Additionally, `default` can be used to explicitly use the default strategy explained above.\n\n*   If the `locator` is `NEW` (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.\n\n*   If the `locator` is `MAIN` (default, case-insensitive), the main window is selected.\n\n*   If the `locator` is `CURRENT` (case-insensitive), nothing is done. This effectively just returns the current window handle.\n\n*   If the `locator` is not a string, it is expected to be a list of window handles _to exclude_. Such a list of excluded windows can be get from [Get Window Handles](#Get%20Window%20Handles) prior to doing an action that opens a new window.\n\nThe `timeout` is used to specify how long keyword will poll to select the new window. The `timeout` is new in SeleniumLibrary 3.2.\n\nExample:\n\n```\nClick Link  popup1    # Open new window\nSelect Window  example    # Select window using default strategy\nTitle Should Be  Pop-up 1    \nClick Button  popup2    # Open another window\n${handle} =  Select Window  NEW  # Select latest opened window\nTitle Should Be  Pop-up 2    \nSelect Window  ${handle}    # Select window using handle\nTitle Should Be  Pop-up 1    \nSelect Window  MAIN    # Select the main window\nTitle Should Be  Main    \n${excludes} =  Get Window Handles    # Get list of current windows\nClick Link  popup3    # Open one more window\nSelect Window  ${excludes}    # Select window using excludes\nTitle Should Be  Pop-up 3    \n```\n\n**NOTE:**\n\n*   The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n*   Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.\n*   Earlier versions supported aliases `None`, `null` and the empty string for selecting the main window, and alias `self` for selecting the current window. Support for these aliases were removed in SeleniumLibrary 3.2."
        },
        {
            "name": "Set Browser Implicit Wait",
            "args": [
                "value"
            ],
            "doc": "Sets the implicit wait value used by Selenium.\n\nSame as [Set Selenium Implicit Wait](#Set%20Selenium%20Implicit%20Wait) but only affects the current browser."
        },
        {
            "name": "Set Focus To Element",
            "args": [
                "locator"
            ],
            "doc": "Sets focus to element identified by `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named [Focus](#Focus)."
        },
        {
            "name": "Set Screenshot Directory",
            "args": [
                "path"
            ],
            "doc": "Sets the directory for captured screenshots.\n\n`path` argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when [importing](#Importing) the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.\n\n`persist` argument is deprecated and has no effect.\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\nReturning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2."
        },
        {
            "name": "Set Selenium Implicit Wait",
            "args": [
                "value"
            ],
            "doc": "Sets the implicit wait value used by Selenium.\n\nThe value can be given as a number that is considered to be seconds or as a human readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nThis keyword sets the implicit wait for all opened browsers. Use [Set Browser Implicit Wait](#Set%20Browser%20Implicit%20Wait) to set it only to the current browser.\n\nSee the [Implicit wait](#Implicit%20wait) section above for more information.\n\nExample:\n\n```\n${orig wait} =  Set Selenium Implicit Wait  10 seconds\nPerform AJAX call that is slow    \nSet Selenium Implicit Wait  ${orig wait}  \n```"
        },
        {
            "name": "Set Selenium Speed",
            "args": [
                "value"
            ],
            "doc": "Sets the delay that is waited after each Selenium command.\n\nThe value can be given as a number that is considered to be seconds or as a human readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nSee the [Selenium Speed](#Selenium%20speed) section above for more information.\n\nExample:\n\n```\nSet Selenium Speed  0.5 seconds\n```"
        },
        {
            "name": "Set Selenium Timeout",
            "args": [
                "value"
            ],
            "doc": "Sets the timeout that is used by various keywords.\n\nThe value can be given as a number that is considered to be seconds or as a human readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nSee the [Timeout](#Timeout) section above for more information.\n\nExample:\n\n```\n${orig timeout} =  Set Selenium Timeout  15 seconds\nOpen page that loads slowly    \nSet Selenium Timeout  ${orig timeout}  \n```"
        },
        {
            "name": "Set Window Position",
            "args": [
                "x",
                "y"
            ],
            "doc": "Sets window position using `x` and `y` coordinates.\n\nThe position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.\n\nValues can be given using strings containing numbers or by using actual numbers. See also [Get Window Position](#Get%20Window%20Position).\n\nExample:\n\n```\nSet Window Position  100  200\n```"
        },
        {
            "name": "Set Window Size",
            "args": [
                "width",
                "height"
            ],
            "doc": "Sets current windows size to given `width` and `height`.\n\nValues can be given using strings containing numbers or by using actual numbers. See also [Get Window Size](#Get%20Window%20Size).\n\nBrowsers have a limit how small they can be set. Trying to set them smaller will cause the actual size to be bigger than the requested size.\n\nExample:\n\n```\nSet Window Size  800  600\n```"
        },
        {
            "name": "Simulate",
            "args": [
                "locator",
                "event"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Simulate Event](#Simulate%20Event) instead."
        },
        {
            "name": "Simulate Event",
            "args": [
                "locator",
                "event"
            ],
            "doc": "Simulates `event` on element identified by `locator`.\n\nThis keyword is useful if element has `OnEvent` handler that needs to be explicitly invoked.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named [Simulate](#Simulate)."
        },
        {
            "name": "Submit Form",
            "args": [
                "locator=None"
            ],
            "doc": "Submits a form identified by `locator`.\n\nIf `locator` is not given, first form on the page is submitted.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Switch Browser",
            "args": [
                "index_or_alias"
            ],
            "doc": "Switches between active browsers using `index_or_alias`.\n\nIndices are returned by the [Open Browser](#Open%20Browser) keyword and aliases can be given to it explicitly. Indices start from 1.\n\nExample:\n\n```\nOpen Browser  http://google.com  ff  \nLocation Should Be  http://google.com    \nOpen Browser  http://yahoo.com  ie  alias=second\nLocation Should Be  http://yahoo.com    \nSwitch Browser  1  # index  \nPage Should Contain  I'm feeling lucky    \nSwitch Browser  second  # alias  \nPage Should Contain  More Yahoo!    \nClose All Browsers      \n```\n\nAbove example expects that there was no other open browsers when opening the first one because it used index `1` when switching to it later. If you are not sure about that, you can store the index into a variable as below.\n\n```\n${index} =  Open Browser  http://google.com\n# Do something ...    \nSwitch Browser  ${index}  \n```"
        },
        {
            "name": "Table Cell Should Contain",
            "args": [
                "locator",
                "row",
                "column",
                "expected",
                "loglevel=INFO"
            ],
            "doc": "Verifies table cell contains text `expected`.\n\nSee [Get Table Cell](#Get%20Table%20Cell) that this keyword uses internally for explanation about accepted arguments."
        },
        {
            "name": "Table Column Should Contain",
            "args": [
                "locator",
                "column",
                "expected",
                "loglevel=INFO"
            ],
            "doc": "Verifies table column contains text `expected`.\n\nThe table is located using the `locator` argument and its column found using `column`. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nColumn indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.\n\nIf a table contains cells that span multiple columns, those merged cells count as a single column.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about the `loglevel` argument."
        },
        {
            "name": "Table Footer Should Contain",
            "args": [
                "locator",
                "expected",
                "loglevel=INFO"
            ],
            "doc": "Verifies table footer contains text `expected`.\n\nAny `<td>` element inside `<tfoot>` element is considered to be part of the footer.\n\nThe table is located using the `locator` argument. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about the `loglevel` argument."
        },
        {
            "name": "Table Header Should Contain",
            "args": [
                "locator",
                "expected",
                "loglevel=INFO"
            ],
            "doc": "Verifies table header contains text `expected`.\n\nAny `<th>` element anywhere in the table is considered to be part of the header.\n\nThe table is located using the `locator` argument. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about the `loglevel` argument."
        },
        {
            "name": "Table Row Should Contain",
            "args": [
                "locator",
                "row",
                "expected",
                "loglevel=INFO"
            ],
            "doc": "Verifies that table row contains text `expected`.\n\nThe table is located using the `locator` argument and its column found using `column`. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nRow indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.\n\nIf a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about the `loglevel` argument."
        },
        {
            "name": "Table Should Contain",
            "args": [
                "locator",
                "expected",
                "loglevel=INFO"
            ],
            "doc": "Verifies table contains text `expected`.\n\nThe table is located using the `locator` argument. See the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about the `loglevel` argument."
        },
        {
            "name": "Textarea Should Contain",
            "args": [
                "locator",
                "expected",
                "message=None"
            ],
            "doc": "Verifies text area `locator` contains text `expected`.\n\n`message` can be used to override default error message.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Textarea Value Should Be",
            "args": [
                "locator",
                "expected",
                "message=None"
            ],
            "doc": "Verifies text area `locator` has exactly text `expected`.\n\n`message` can be used to override default error message.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Textfield Should Contain",
            "args": [
                "locator",
                "expected",
                "message=None"
            ],
            "doc": "Verifies text field `locator` contains text `expected`.\n\n`message` can be used to override the default error message.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Textfield Value Should Be",
            "args": [
                "locator",
                "expected",
                "message=None"
            ],
            "doc": "Verifies text field `locator` has exactly text `expected`.\n\n`message` can be used to override default error message.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Title Should Be",
            "args": [
                "title",
                "message=None"
            ],
            "doc": "Verifies that current page title equals `title`.\n\nThe `message` argument can be used to override the default error message.\n\n`message` argument is new in SeleniumLibrary 3.1."
        },
        {
            "name": "Unselect All From List",
            "args": [
                "locator"
            ],
            "doc": "Unselects all options from multi-selection list `locator`.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.0."
        },
        {
            "name": "Unselect Checkbox",
            "args": [
                "locator"
            ],
            "doc": "Removes selection of checkbox identified by `locator`.\n\nDoes nothing if the checkbox is not selected.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Unselect Frame",
            "args": [],
            "doc": "Sets the main frame as the current frame.\n\nIn practice cancels the previous [Select Frame](#Select%20Frame) call."
        },
        {
            "name": "Unselect From List",
            "args": [
                "locator",
                "*items"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use Unselect From List By Label/Value/Index instead.\n\nThis keyword unselects options based on labels or values, which makes it very complicated and slow. It has been deprecated in SeleniumLibrary 3.0, and dedicated keywords [Unselect From List By Label](#Unselect%20From%20List%20By%20Label), [Unselect From List By Value](#Unselect%20From%20List%20By%20Value) and [Unselect From List By Index](#Unselect%20From%20List%20By%20Index) should be used instead."
        },
        {
            "name": "Unselect From List By Index",
            "args": [
                "locator",
                "*indexes"
            ],
            "doc": "Unselects options from selection list `locator` by `indexes`.\n\nIndexes of list options start from 0. This keyword works only with multi-selection lists.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Unselect From List By Label",
            "args": [
                "locator",
                "*labels"
            ],
            "doc": "Unselects options from selection list `locator` by `labels`.\n\nThis keyword works only with multi-selection lists.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Unselect From List By Value",
            "args": [
                "locator",
                "*values"
            ],
            "doc": "Unselects options from selection list `locator` by `values`.\n\nThis keyword works only with multi-selection lists.\n\nSee the [Locating elements](#Locating%20elements) section for details about the locator syntax."
        },
        {
            "name": "Wait For Condition",
            "args": [
                "condition",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until `condition` is true or `timeout` expires.\n\nThe condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See [Execute JavaScript](#Execute%20Javascript) for information about accessing content on pages.\n\nFails if the timeout expires before the condition becomes true. See the Timeouts section for more information about using timeouts and their default value.\n\n`error` can be used to override the default error message.\n\nExamples:\n\n```\nWait For Condition  return document.title == \"New Title\"\nWait For Condition  return jQuery.active == 0\nWait For Condition  style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\"\n```"
        },
        {
            "name": "Wait Until Element Contains",
            "args": [
                "locator",
                "text",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` contains `text`.\n\nFails if `timeout` expires before the text appears. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Element Does Not Contain",
            "args": [
                "locator",
                "text",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` does not contain `text`.\n\nFails if `timeout` expires before the text disappears. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Element Is Enabled",
            "args": [
                "locator",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` is enabled.\n\nElement is considered enabled if it is not disabled nor read-only.\n\nFails if `timeout` expires before the element is enabled. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\nConsidering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0."
        },
        {
            "name": "Wait Until Element Is Not Visible",
            "args": [
                "locator",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` is not visible.\n\nFails if `timeout` expires before the element is not visible. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Element Is Visible",
            "args": [
                "locator",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` is visible.\n\nFails if `timeout` expires before the element is visible. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Page Contains",
            "args": [
                "text",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until `text` appears on current page.\n\nFails if `timeout` expires before the text appears. See the Timeouts section for more information about using timeouts and their default value.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Page Contains Element",
            "args": [
                "locator",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` appears on current page.\n\nFails if `timeout` expires before the element appears. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Page Does Not Contain",
            "args": [
                "text",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until `text` disappears from current page.\n\nFails if `timeout` expires before the text disappears. See the Timeouts section for more information about using timeouts and their default value.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Wait Until Page Does Not Contain Element",
            "args": [
                "locator",
                "timeout=None",
                "error=None"
            ],
            "doc": "Waits until element `locator` disappears from current page.\n\nFails if `timeout` expires before the element disappears. See the Timeouts section for more information about using timeouts and their default value and the [Locating elements](#Locating%20elements) section for details about the locator syntax.\n\n`error` can be used to override the default error message."
        },
        {
            "name": "Xpath Should Match X Times",
            "args": [
                "xpath",
                "x",
                "message=None",
                "loglevel=INFO"
            ],
            "doc": "**DEPRECATED in SeleniumLibrary 3.2.** Use [Page Should Contain Element](#Page%20Should%20Contain%20Element) with `limit` argument instead."
        }
    ]
}