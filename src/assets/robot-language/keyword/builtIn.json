{
    "name": "BuiltIn",
    "version": "3.0.4",
    "keywords": [
        {
            "name": "Call Method",
            "args": [
                "object",
                "method_name",
                "*args",
                "**kwargs"
            ],
            "doc": "Calls the named method of the given object with the provided arguments.\n\nThe possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.\n\nSupport for `**kwargs` is new in Robot Framework 2.9. Since that possible equal signs in other arguments must be escaped with a backslash like `\\=`.\n\nExamples:\n\n```\nCall Method  ${hashtable}  put  myname  myvalue\n${isempty} =  Call Method  ${hashtable}  isEmpty  \nShould Not Be True  ${isempty}      \n${value} =  Call Method  ${hashtable}  get  myname\nShould Be Equal  ${value}  myvalue    \nCall Method  ${object}  kwargs  name=value  foo=bar\nCall Method  ${object}  positional  escaped\\=equals  \n```"
        },
        {
            "name": "Catenate",
            "args": [
                "*items"
            ],
            "doc": "Catenates the given items together and returns the resulted string.\n\nBy default, items are catenated with spaces, but if the first item contains the string `SEPARATOR=<sep>`, the separator `<sep>` is used instead. Items are converted into strings when necessary.\n\nExamples:\n\n```\n${str1} =  Catenate  Hello  world  \n${str2} =  Catenate  SEPARATOR=---  Hello  world\n${str3} =  Catenate  SEPARATOR=  Hello  world\n```\n\n\\=>\n\n${str1} = 'Hello world'\n${str2} = 'Hello---world'\n${str3} = 'Helloworld'"
        },
        {
            "name": "Comment",
            "args": [
                "*messages"
            ],
            "doc": "Displays the given messages in the log file as keyword arguments.\n\nThis keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the [Log](#Log) or [Log Many](#Log%20Many) keywords."
        },
        {
            "name": "Continue For Loop",
            "args": [],
            "doc": "Skips the current for loop iteration and continues from the next.\n\nSkips the remaining keywords in the current for loop iteration and continues from the next one. Can be used directly in a for loop or in a keyword that the loop uses.\n\nExample:\n\n```\n:FOR  ${var}  IN  @{VALUES}\n  Run Keyword If  '${var}' == 'CONTINUE'  Continue For Loop\n  Do Something  ${var}  \n```\n\nSee [Continue For Loop If](#Continue%20For%20Loop%20If) to conditionally continue a for loop without using [Run Keyword If](#Run%20Keyword%20If) or other wrapper keywords.\n\nNew in Robot Framework 2.8."
        },
        {
            "name": "Continue For Loop If",
            "args": [
                "condition"
            ],
            "doc": "Skips the current for loop iteration if the `condition` is true.\n\nA wrapper for [Continue For Loop](#Continue%20For%20Loop) to continue a for loop based on the given condition. The condition is evaluated using the same semantics as with [Should Be True](#Should%20Be%20True) keyword.\n\nExample:\n\n```\n:FOR  ${var}  IN  @{VALUES}\n  Continue For Loop If  '${var}' == 'CONTINUE'  \n  Do Something  ${var}  \n```\n\nNew in Robot Framework 2.8."
        },
        {
            "name": "Convert To Binary",
            "args": [
                "item",
                "base=None",
                "prefix=None",
                "length=None"
            ],
            "doc": "Converts the given item to a binary string.\n\nThe `item`, with an optional `base`, is first converted to an integer using [Convert To Integer](#Convert%20To%20Integer) internally. After that it is converted to a binary number (base 2) represented as a string such as `1011`.\n\nThe returned value can contain an optional `prefix` and can be required to be of minimum `length` (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.\n\nExamples:\n\n```\n${result} =  Convert To Binary  10      # Result is 1010\n${result} =  Convert To Binary  F  base=16  prefix=0b  # Result is 0b1111\n${result} =  Convert To Binary  -2  prefix=B  length=4  # Result is -B0010\n```\n\nSee also [Convert To Integer](#Convert%20To%20Integer), [Convert To Octal](#Convert%20To%20Octal) and [Convert To Hex](#Convert%20To%20Hex)."
        },
        {
            "name": "Convert To Boolean",
            "args": [
                "item"
            ],
            "doc": "Converts the given item to Boolean true or false.\n\nHandles strings `True` and `False` (case-insensitive) as expected, otherwise returns item's [truth value](http://docs.python.org/2/library/stdtypes.html#truth) using Python's `bool()` method."
        },
        {
            "name": "Convert To Bytes",
            "args": [
                "input",
                "input_type=text"
            ],
            "doc": "Converts the given `input` to bytes according to the `input_type`.\n\nValid input types are listed below:\n\n*   `text:` Converts text to bytes character by character. All characters with ordinal below 256 can be used and are converted to bytes with same values. Many characters are easiest to represent using escapes like `\\x00` or `\\xff`. Supports both Unicode strings and bytes.\n\n*   `int:` Converts integers separated by spaces to bytes. Similarly as with [Convert To Integer](#Convert%20To%20Integer), it is possible to use binary, octal, or hex values by prefixing the values with `0b`, `0o`, or `0x`, respectively.\n\n*   `hex:` Converts hexadecimal values to bytes. Single byte is always two characters long (e.g. `01` or `FF`). Spaces are ignored and can be used freely as a visual separator.\n\n*   `bin:` Converts binary values to bytes. Single byte is always eight characters long (e.g. `00001010`). Spaces are ignored and can be used freely as a visual separator.\n\nIn addition to giving the input as a string, it is possible to use lists or other iterables containing individual characters or numbers. In that case numbers do not need to be padded to certain length and they cannot contain extra spaces.\n\nExamples (last column shows returned bytes):\n\n```\n${bytes} =  Convert To Bytes  hyv√§    # hyv\\xe4\n${bytes} =  Convert To Bytes  \\xff\\x07    # \\xff\\x07\n${bytes} =  Convert To Bytes  82 70  int  # RF\n${bytes} =  Convert To Bytes  0b10 0x10  int  # \\x02\\x10\n${bytes} =  Convert To Bytes  ff 00 07  hex  # \\xff\\x00\\x07\n${bytes} =  Convert To Bytes  5246212121  hex  # RF!!!\n${bytes} =  Convert To Bytes  0000 1000  bin  # \\x08\n${input} =  Create List  1  2  12\n${bytes} =  Convert To Bytes  ${input}  int  # \\x01\\x02\\x0c\n${bytes} =  Convert To Bytes  ${input}  hex  # \\x01\\x02\\x12\n```\n\nUse Encode String To Bytes in `String` library if you need to convert text to bytes using a certain encoding.\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Convert To Hex",
            "args": [
                "item",
                "base=None",
                "prefix=None",
                "length=None",
                "lowercase=False"
            ],
            "doc": "Converts the given item to a hexadecimal string.\n\nThe `item`, with an optional `base`, is first converted to an integer using [Convert To Integer](#Convert%20To%20Integer) internally. After that it is converted to a hexadecimal number (base 16) represented as a string such as `FF0A`.\n\nThe returned value can contain an optional `prefix` and can be required to be of minimum `length` (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.\n\nBy default the value is returned as an upper case string, but the `lowercase` argument a true value (see [Boolean arguments](#Boolean%20arguments)) turns the value (but not the given prefix) to lower case.\n\nExamples:\n\n```\n${result} =  Convert To Hex  255      # Result is FF\n${result} =  Convert To Hex  -10  prefix=0x  length=2  # Result is -0x0A\n${result} =  Convert To Hex  255  prefix=X  lowercase=yes  # Result is Xff\n```\n\nSee also [Convert To Integer](#Convert%20To%20Integer), [Convert To Binary](#Convert%20To%20Binary) and [Convert To Octal](#Convert%20To%20Octal)."
        },
        {
            "name": "Convert To Integer",
            "args": [
                "item",
                "base=None"
            ],
            "doc": "Converts the given item to an integer number.\n\nIf the given item is a string, it is by default expected to be an integer in base 10. There are two ways to convert from other bases:\n\n*   Give base explicitly to the keyword as `base` argument.\n\n*   Prefix the given string with the base so that `0b` means binary (base 2), `0o` means octal (base 8), and `0x` means hex (base 16). The prefix is considered only when `base` argument is not given and may itself be prefixed with a plus or minus sign.\n\nThe syntax is case-insensitive and possible spaces are ignored.\n\nExamples:\n\n```\n${result} =  Convert To Integer  100    # Result is 100\n${result} =  Convert To Integer  FF AA  16  # Result is 65450\n${result} =  Convert To Integer  100  8  # Result is 64\n${result} =  Convert To Integer  -100  2  # Result is -4\n${result} =  Convert To Integer  0b100    # Result is 4\n${result} =  Convert To Integer  -0x100    # Result is -256\n```\n\nSee also [Convert To Number](#Convert%20To%20Number), [Convert To Binary](#Convert%20To%20Binary), [Convert To Octal](#Convert%20To%20Octal), [Convert To Hex](#Convert%20To%20Hex), and [Convert To Bytes](#Convert%20To%20Bytes)."
        },
        {
            "name": "Convert To Number",
            "args": [
                "item",
                "precision=None"
            ],
            "doc": "Converts the given item to a floating point number.\n\nIf the optional `precision` is positive or zero, the returned number is rounded to that number of decimal digits. Negative precision means that the number is rounded to the closest multiple of 10 to the power of the absolute precision. If a number is equally close to a certain precision, it is always rounded away from zero.\n\nExamples:\n\n```\n${result} =  Convert To Number  42.512    # Result is 42.512\n${result} =  Convert To Number  42.512  1  # Result is 42.5\n${result} =  Convert To Number  42.512  0  # Result is 43.0\n${result} =  Convert To Number  42.512  -1  # Result is 40.0\n```\n\nNotice that machines generally cannot store floating point numbers accurately. This may cause surprises with these numbers in general and also when they are rounded. For more information see, for example, these resources:\n\n*   [http://docs.python.org/2/tutorial/floatingpoint.html](http://docs.python.org/2/tutorial/floatingpoint.html)\n*   [http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition](http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition)\n\nIf you need an integer number, use [Convert To Integer](#Convert%20To%20Integer) instead."
        },
        {
            "name": "Convert To Octal",
            "args": [
                "item",
                "base=None",
                "prefix=None",
                "length=None"
            ],
            "doc": "Converts the given item to an octal string.\n\nThe `item`, with an optional `base`, is first converted to an integer using [Convert To Integer](#Convert%20To%20Integer) internally. After that it is converted to an octal number (base 8) represented as a string such as `775`.\n\nThe returned value can contain an optional `prefix` and can be required to be of minimum `length` (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.\n\nExamples:\n\n```\n${result} =  Convert To Octal  10      # Result is 12\n${result} =  Convert To Octal  -F  base=16  prefix=0  # Result is -017\n${result} =  Convert To Octal  16  prefix=oct  length=4  # Result is oct0020\n```\n\nSee also [Convert To Integer](#Convert%20To%20Integer), [Convert To Binary](#Convert%20To%20Binary) and [Convert To Hex](#Convert%20To%20Hex)."
        },
        {
            "name": "Convert To String",
            "args": [
                "item"
            ],
            "doc": "Converts the given item to a Unicode string.\n\nUses `__unicode__` or `__str__` method with Python objects and `toString` with Java objects.\n\nUse Encode String To Bytes and Decode Bytes To String keywords in `String` library if you need to convert between Unicode and byte strings using different encodings. Use [Convert To Bytes](#Convert%20To%20Bytes) if you just want to create byte strings."
        },
        {
            "name": "Create Dictionary",
            "args": [
                "*items"
            ],
            "doc": "Creates and returns a dictionary based on the given `items`.\n\nItems are typically given using the `key=value` syntax same way as `&{dictionary}` variables are created in the Variable table. Both keys and values can contain variables, and possible equal sign in key can be escaped with a backslash like `escaped\\=key=value`. It is also possible to get items from existing dictionaries by simply using them like `&{dict}`.\n\nAlternatively items can be specified so that keys and values are given separately. This and the `key=value` syntax can even be combined, but separately given items must be first.\n\nIf same key is used multiple times, the last value has precedence. The returned dictionary is ordered, and values with strings as keys can also be accessed using a convenient dot-access syntax like `${dict.key}`.\n\nExamples:\n\n```\n&{dict} =  Create Dictionary  key=value  foo=bar      # key=value syntax\nShould Be True  ${dict} == {'key': 'value', 'foo': 'bar'}          \n&{dict2} =  Create Dictionary  key  value  foo  bar  # separate key and value\nShould Be Equal  ${dict}  ${dict2}        \n&{dict} =  Create Dictionary  ${1}=${2}  &{dict}  foo=new    # using variables\nShould Be True  ${dict} == {1: 2, 'key': 'value', 'foo': 'new'}          \nShould Be Equal  ${dict.key}  value        # dot-access\n```\n\nThis keyword was changed in Robot Framework 2.9 in many ways:\n\n*   Moved from `Collections` library to `BuiltIn`.\n*   Support also non-string keys in `key=value` syntax.\n*   Returned dictionary is ordered and dot-accessible.\n*   Old syntax to give keys and values separately was deprecated, but deprecation was later removed in RF 3.0.1."
        },
        {
            "name": "Create List",
            "args": [
                "*items"
            ],
            "doc": "Returns a list containing given items.\n\nThe returned list can be assigned both to `${scalar}` and `@{list}` variables.\n\nExamples:\n\n```\n@{list} =  Create List  a  b  c\n${scalar} =  Create List  a  b  c\n${ints} =  Create List  ${1}  ${2}  ${3}\n```"
        },
        {
            "name": "Evaluate",
            "args": [
                "expression",
                "modules=None",
                "namespace=None"
            ],
            "doc": "Evaluates the given expression in Python and returns the results.\n\n`expression` is evaluated in Python as explained in [Evaluating expressions](#Evaluating%20expressions).\n\n`modules` argument can be used to specify a comma separated list of Python modules to be imported and added to the evaluation namespace.\n\n`namespace` argument can be used to pass a custom evaluation namespace as a dictionary. Possible `modules` are added to this namespace. This is a new feature in Robot Framework 2.8.4.\n\nVariables used like `${variable}` are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using special syntax `$variable`. This is a new feature in Robot Framework 2.9 and it is explained more thoroughly in [Evaluating expressions](#Evaluating%20expressions).\n\nExamples (expecting `${result}` is 3.14):\n\n```\n${status} =  Evaluate  0 < ${result} < 10  # Would also work with string '3.14'\n${status} =  Evaluate  0 < $result < 10  # Using variable itself, not string representation\n${random} =  Evaluate  random.randint(0, sys.maxint)  modules=random, sys\n${ns} =  Create Dictionary  x=${4}  y=${2}\n${result} =  Evaluate  x*10 + y  namespace=${ns}\n```\n\n\\=>\n\n${status} = True\n${random} = <random integer>\n${result} = 42"
        },
        {
            "name": "Exit For Loop",
            "args": [],
            "doc": "Stops executing the enclosing for loop.\n\nExits the enclosing for loop and continues execution after it. Can be used directly in a for loop or in a keyword that the loop uses.\n\nExample:\n\n```\n:FOR  ${var}  IN  @{VALUES}\n  Run Keyword If  '${var}' == 'EXIT'  Exit For Loop\n  Do Something  ${var}  \n```\n\nSee [Exit For Loop If](#Exit%20For%20Loop%20If) to conditionally exit a for loop without using [Run Keyword If](#Run%20Keyword%20If) or other wrapper keywords."
        },
        {
            "name": "Exit For Loop If",
            "args": [
                "condition"
            ],
            "doc": "Stops executing the enclosing for loop if the `condition` is true.\n\nA wrapper for [Exit For Loop](#Exit%20For%20Loop) to exit a for loop based on the given condition. The condition is evaluated using the same semantics as with [Should Be True](#Should%20Be%20True) keyword.\n\nExample:\n\n```\n:FOR  ${var}  IN  @{VALUES}\n  Exit For Loop If  '${var}' == 'EXIT'  \n  Do Something  ${var}  \n```\n\nNew in Robot Framework 2.8."
        },
        {
            "name": "Fail",
            "args": [
                "msg=None",
                "*tags"
            ],
            "doc": "Fails the test with the given message and optionally alters its tags.\n\nThe error message is specified using the `msg` argument. It is possible to use HTML in the given error message, similarly as with any other keyword accepting an error message, by prefixing the error with `*HTML*`.\n\nIt is possible to modify tags of the current test case by passing tags after the message. Tags starting with a hyphen (e.g. `-regression`) are removed and others added. Tags are modified using [Set Tags](#Set%20Tags) and [Remove Tags](#Remove%20Tags) internally, and the semantics setting and removing them are the same as with these keywords.\n\nExamples:\n\n```\nFail  Test not ready      # Fails with the given message.\nFail  *HTML*<b>Test not ready</b>      # Fails using HTML in the message.\nFail  Test not ready  not-ready    # Fails and adds 'not-ready' tag.\nFail  OS not supported  -regression    # Removes tag 'regression'.\nFail  My message  tag  -t*  # Removes all tags starting with 't' except the newly added 'tag'.\n```\n\nSee [Fatal Error](#Fatal%20Error) if you need to stop the whole test execution.\n\nSupport for modifying tags was added in Robot Framework 2.7.4 and HTML message support in 2.8."
        },
        {
            "name": "Fatal Error",
            "args": [
                "msg=None"
            ],
            "doc": "Stops the whole test execution.\n\nThe test or suite where this keyword is used fails with the provided message, and subsequent tests fail with a canned message. Possible teardowns will nevertheless be executed.\n\nSee [Fail](#Fail) if you only want to stop one test case unconditionally."
        },
        {
            "name": "Get Count",
            "args": [
                "item1",
                "item2"
            ],
            "doc": "Returns and logs how many times `item2` is found from `item1`.\n\nThis keyword works with Python strings and lists and all objects that either have `count` method or can be converted to Python lists.\n\nExample:\n\n```\n${count} =  Get Count  ${some item}  interesting value\nShould Be True  5 < ${count} < 10    \n```"
        },
        {
            "name": "Get Length",
            "args": [
                "item"
            ],
            "doc": "Returns and logs the length of the given item as an integer.\n\nThe item can be anything that has a length, for example, a string, a list, or a mapping. The keyword first tries to get the length with the Python function `len`, which calls the item's `__len__` method internally. If that fails, the keyword tries to call the item's possible `length` and `size` methods directly. The final attempt is trying to get the value of the item's `length` attribute. If all these attempts are unsuccessful, the keyword fails.\n\nExamples:\n\n```\n${length} =  Get Length  Hello, world!  \nShould Be Equal As Integers  ${length}  13  \n@{list} =  Create List  Hello,  world!\n${length} =  Get Length  ${list}  \nShould Be Equal As Integers  ${length}  2  \n```\n\nSee also [Length Should Be](#Length%20Should%20Be), [Should Be Empty](#Should%20Be%20Empty) and [Should Not Be Empty](#Should%20Not%20Be%20Empty)."
        },
        {
            "name": "Get Library Instance",
            "args": [
                "name=None",
                "all=False"
            ],
            "doc": "Returns the currently active instance of the specified test library.\n\nThis keyword makes it easy for test libraries to interact with other test libraries that have state. This is illustrated by the Python example below:\n\nfrom robot.libraries.BuiltIn import BuiltIn\n\ndef title\\_should\\_start\\_with(expected):\n    seleniumlib = BuiltIn().get\\_library\\_instance('SeleniumLibrary')\n    title = seleniumlib.get\\_title()\n    if not title.startswith(expected):\n        raise AssertionError(\"Title '%s' did not start with '%s'\"\n                             % (title, expected))\n\nIt is also possible to use this keyword in the test data and pass the returned library instance to another keyword. If a library is imported with a custom name, the `name` used to get the instance must be that name and not the original library name.\n\nIf the optional argument `all` is given a true value, then a dictionary mapping all library names to instances will be returned. This feature is new in Robot Framework 2.9.2.\n\nExample:\n\n```\n&{all libs} =  Get library instance  all=True\n```"
        },
        {
            "name": "Get Time",
            "args": [
                "format=timestamp",
                "time_=NOW"
            ],
            "doc": "Returns the given time in the requested format.\n\n**NOTE:** DateTime library added in Robot Framework 2.8.5 contains much more flexible keywords for getting the current date and time and for date and time handling in general.\n\nHow time is returned is determined based on the given `format` string as follows. Note that all checks are case-insensitive.\n\n1) If `format` contains the word `epoch`, the time is returned in seconds after the UNIX epoch (1970-01-01 00:00:00 UTC). The return value is always an integer.\n\n2) If `format` contains any of the words `year`, `month`, `day`, `hour`, `min`, or `sec`, only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in `format` is not significant. The parts are returned as zero-padded strings (e.g. May -> `05`).\n\n3) Otherwise (and by default) the time is returned as a timestamp string in the format `2006-02-24 15:08:31`.\n\nBy default this keyword returns the current local time, but that can be altered using `time` argument as explained below. Note that all checks involving strings are case-insensitive.\n\n1) If `time` is a number, or a string that can be converted to a number, it is interpreted as seconds since the UNIX epoch. This documentation was originally written about 1177654467 seconds after the epoch.\n\n2) If `time` is a timestamp, that time will be used. Valid timestamp formats are `YYYY-MM-DD hh:mm:ss` and `YYYYMMDD hhmmss`.\n\n3) If `time` is equal to `NOW` (default), the current local time is used. This time is got using Python's `time.time()` function.\n\n4) If `time` is equal to `UTC`, the current time in [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. This time is got using `time.time() + time.altzone` in Python.\n\n5) If `time` is in the format like `NOW - 1 day` or `UTC + 1 hour 30 min`, the current local/UTC time plus/minus the time specified with the time string is used. The time string format is described in an appendix of Robot Framework User Guide.\n\nExamples (expecting the current local time is 2006-03-29 15:06:21):\n\n```\n${time} =  Get Time      \n${secs} =  Get Time  epoch    \n${year} =  Get Time  return year    \n${yyyy}  ${mm}  ${dd} =  Get Time  year,month,day\n@{time} =  Get Time  year month day hour min sec    \n${y}  ${s} =  Get Time  seconds and year  \n```\n\n\\=>\n\n${time} = '2006-03-29 15:06:21'\n${secs} = 1143637581\n${year} = '2006'\n${yyyy} = '2006', ${mm} = '03', ${dd} = '29'\n@{time} = \\['2006', '03', '29', '15', '06', '21'\\]\n${y} = '2006'\n${s} = '21'\n\nExamples (expecting the current local time is 2006-03-29 15:06:21 and UTC time is 2006-03-29 12:06:21):\n\n```\n${time} =  Get Time    1177654467  # Time given as epoch seconds\n${secs} =  Get Time  sec  2007-04-27 09:14:27  # Time given as a timestamp\n${year} =  Get Time  year  NOW  # The local time of execution\n@{time} =  Get Time  hour min sec  NOW + 1h 2min 3s  # 1h 2min 3s added to the local time\n@{utc} =  Get Time  hour min sec  UTC  # The UTC time of execution\n${hour} =  Get Time  hour  UTC - 1 hour  # 1h subtracted from the UTC time\n```\n\n\\=>\n\n${time} = '2007-04-27 09:14:27'\n${secs} = 27\n${year} = '2006'\n@{time} = \\['16', '08', '24'\\]\n@{utc} = \\['12', '06', '21'\\]\n${hour} = '11'\n\nSupport for UTC time was added in Robot Framework 2.7.5 but it did not work correctly until 2.7.7."
        },
        {
            "name": "Get Variable Value",
            "args": [
                "name",
                "default=None"
            ],
            "doc": "Returns variable value or `default` if the variable does not exist.\n\nThe name of the variable can be given either as a normal variable name (e.g. `${NAME}`) or in escaped format (e.g. `\\${NAME}`). Notice that the former has some limitations explained in [Set Suite Variable](#Set%20Suite%20Variable).\n\nExamples:\n\n```\n${x} =  Get Variable Value  ${a}  default\n${y} =  Get Variable Value  ${a}  ${b}\n${z} =  Get Variable Value  ${z}  \n```\n\n\\=>\n\n${x} gets value of ${a} if ${a} exists and string 'default' otherwise\n${y} gets value of ${a} if ${a} exists and value of ${b} otherwise\n${z} is set to Python None if it does not exist previously\n\nSee [Set Variable If](#Set%20Variable%20If) for another keyword to set variables dynamically."
        },
        {
            "name": "Get Variables",
            "args": [
                "no_decoration=False"
            ],
            "doc": "Returns a dictionary containing all variables in the current scope.\n\nVariables are returned as a special dictionary that allows accessing variables in space, case, and underscore insensitive manner similarly as accessing variables in the test data. This dictionary supports all same operations as normal Python dictionaries and, for example, Collections library can be used to access or modify it. Modifying the returned dictionary has no effect on the variables available in the current scope.\n\nBy default variables are returned with `${}`, `@{}` or `&{}` decoration based on variable types. Giving a true value (see [Boolean arguments](#Boolean%20arguments)) to the optional argument `no_decoration` will return the variables without the decoration. This option is new in Robot Framework 2.9.\n\nExample:\n\n```\n${example_variable} =  Set Variable  example value  \n${variables} =  Get Variables    \nDictionary Should Contain Key  ${variables}  \\${example_variable}  \nDictionary Should Contain Key  ${variables}  \\${ExampleVariable}  \nSet To Dictionary  ${variables}  \\${name}  value\nVariable Should Not Exist  \\${name}    \n${no decoration} =  Get Variables  no_decoration=Yes  \nDictionary Should Contain Key  ${no decoration}  example_variable  \n```\n\nNote: Prior to Robot Framework 2.7.4 variables were returned as a custom object that did not support all dictionary methods."
        },
        {
            "name": "Import Library",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Imports a library with the given name and optional arguments.\n\nThis functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting table.\n\nThis keyword supports importing libraries both using library names and physical paths. When paths are used, they must be given in absolute format or found from [search path](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#pythonpath-jythonpath-and-ironpythonpath). Forward slashes can be used as path separators in all operating systems.\n\nIt is possible to pass arguments to the imported library and also named argument syntax works if the library supports it. `WITH NAME` syntax can be used to give a custom name to the imported library.\n\nExamples:\n\n```\nImport Library  MyLibrary      \nImport Library  ${CURDIR}/../Library.py  arg1  named=arg2  \nImport Library  ${LIBRARIES}/Lib.java  arg  WITH NAME  JavaLib\n```"
        },
        {
            "name": "Import Resource",
            "args": [
                "path"
            ],
            "doc": "Imports a resource file with the given path.\n\nResources imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Resource setting.\n\nThe given path must be absolute or found from [search path](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#pythonpath-jythonpath-and-ironpythonpath). Forward slashes can be used as path separator regardless the operating system.\n\nExamples:\n\n```\nImport Resource  ${CURDIR}/resource.txt\nImport Resource  ${CURDIR}/../resources/resource.html\nImport Resource  found_from_pythonpath.robot\n```"
        },
        {
            "name": "Import Variables",
            "args": [
                "path",
                "*args"
            ],
            "doc": "Imports a variable file with the given path and optional arguments.\n\nVariables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names. This functionality can thus be used to import new variables, for example, for each test in a test suite.\n\nThe given path must be absolute or found from [search path](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#pythonpath-jythonpath-and-ironpythonpath). Forward slashes can be used as path separator regardless the operating system.\n\nExamples:\n\n```\nImport Variables  ${CURDIR}/variables.py    \nImport Variables  ${CURDIR}/../vars/env.py  arg1  arg2\nImport Variables  file_from_pythonpath.py    \n```"
        },
        {
            "name": "Keyword Should Exist",
            "args": [
                "name",
                "msg=None"
            ],
            "doc": "Fails unless the given keyword exists in the current scope.\n\nFails also if there are more than one keywords with the same name. Works both with the short name (e.g. `Log`) and the full name (e.g. `BuiltIn.Log`).\n\nThe default error message can be overridden with the `msg` argument.\n\nSee also [Variable Should Exist](#Variable%20Should%20Exist)."
        },
        {
            "name": "Length Should Be",
            "args": [
                "item",
                "length",
                "msg=None"
            ],
            "doc": "Verifies that the length of the given item is correct.\n\nThe length of the item is got using the [Get Length](#Get%20Length) keyword. The default error message can be overridden with the `msg` argument."
        },
        {
            "name": "Log",
            "args": [
                "message",
                "level=INFO",
                "html=False",
                "console=False",
                "repr=False"
            ],
            "doc": "Logs the given message with the given level.\n\nValid levels are TRACE, DEBUG, INFO (default), HTML, WARN, and ERROR. Messages below the current active log level are ignored. See [Set Log Level](#Set%20Log%20Level) keyword and `--loglevel` command line option for more details about setting the level.\n\nMessages logged with the WARN or ERROR levels will be automatically visible also in the console and in the Test Execution Errors section in the log file.\n\nLogging can be configured using optional `html`, `console` and `repr` arguments. They are off by default, but can be enabled by giving them a true value. See [Boolean arguments](#Boolean%20arguments) section for more information about true and false values.\n\nIf the `html` argument is given a true value, the message will be considered HTML and special characters such as `<` in it are not escaped. For example, logging `<img src=\"image.png\">` creates an image when `html` is true, but otherwise the message is that exact string. An alternative to using the `html` argument is using the HTML pseudo log level. It logs the message as HTML using the INFO level.\n\nIf the `console` argument is true, the message will be written to the console where test execution was started from in addition to the log file. This keyword always uses the standard output stream and adds a newline after the written message. Use [Log To Console](#Log%20To%20Console) instead if either of these is undesirable,\n\nIf the `repr` argument is true, the given item will be passed through a custom version of Python's `pprint.pformat()` function before logging it. This is useful, for example, when working with strings or bytes containing invisible characters, or when working with nested data structures. The custom version differs from the standard one so that it omits the `u` prefix from Unicode strings and adds `b` prefix to byte strings.\n\nExamples:\n\n```\nLog  Hello, world!      # Normal INFO message.\nLog  Warning, world!  WARN    # Warning.\nLog  <b>Hello</b>, world!  html=yes    # INFO message as HTML.\nLog  <b>Hello</b>, world!  HTML    # Same as above.\nLog  <b>Hello</b>, world!  DEBUG  html=true  # DEBUG as HTML.\nLog  Hello, console!  console=yes    # Log also to the console.\nLog  Hyv√§ \\x00  repr=yes    # Log 'Hyv\\xe4 \\x00'.\n```\n\nSee [Log Many](#Log%20Many) if you want to log multiple messages in one go, and [Log To Console](#Log%20To%20Console) if you only want to write to the console.\n\nArguments `html`, `console`, and `repr` are new in Robot Framework 2.8.2.\n\nPprint support when `repr` is used is new in Robot Framework 2.8.6, and it was changed to drop the `u` prefix and add the `b` prefix in Robot Framework 2.9."
        },
        {
            "name": "Log Many",
            "args": [
                "*messages"
            ],
            "doc": "Logs the given messages as separate entries using the INFO level.\n\nSupports also logging list and dictionary variable items individually.\n\nExamples:\n\n```\nLog Many  Hello  ${var}\nLog Many  @{list}  &{dict}\n```\n\nSee [Log](#Log) and [Log To Console](#Log%20To%20Console) keywords if you want to use alternative log levels, use HTML, or log to the console."
        },
        {
            "name": "Log To Console",
            "args": [
                "message",
                "stream=STDOUT",
                "no_newline=False"
            ],
            "doc": "Logs the given message to the console.\n\nBy default uses the standard output stream. Using the standard error stream is possibly by giving the `stream` argument value `STDERR` (case-insensitive).\n\nBy default appends a newline to the logged message. This can be disabled by giving the `no_newline` argument a true value (see [Boolean arguments](#Boolean%20arguments)).\n\nExamples:\n\n```\nLog To Console  Hello, console!  \nLog To Console  Hello, stderr!  STDERR\nLog To Console  Message starts here and is  no_newline=true\nLog To Console  continued without newline.  \n```\n\nThis keyword does not log the message to the normal log file. Use [Log](#Log) keyword, possibly with argument `console`, if that is desired.\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Log Variables",
            "args": [
                "level=INFO"
            ],
            "doc": "Logs all variables in the current scope with given log level."
        },
        {
            "name": "No Operation",
            "args": [],
            "doc": "Does absolutely nothing."
        },
        {
            "name": "Pass Execution",
            "args": [
                "message",
                "*tags"
            ],
            "doc": "Skips rest of the current test, setup, or teardown with PASS status.\n\nThis keyword can be used anywhere in the test data, but the place where used affects the behavior:\n\n*   When used in any setup or teardown (suite, test or keyword), passes that setup or teardown. Possible keyword teardowns of the started keywords are executed. Does not affect execution or statuses otherwise.\n*   When used in a test outside setup or teardown, passes that particular test case. Possible test and keyword teardowns are executed.\n\nPossible continuable failures before this keyword is used, as well as failures in executed teardowns, will fail the execution.\n\nIt is mandatory to give a message explaining why execution was passed. By default the message is considered plain text, but starting it with `*HTML*` allows using HTML formatting.\n\nIt is also possible to modify test tags passing tags after the message similarly as with [Fail](#Fail) keyword. Tags starting with a hyphen (e.g. `-regression`) are removed and others added. Tags are modified using [Set Tags](#Set%20Tags) and [Remove Tags](#Remove%20Tags) internally, and the semantics setting and removing them are the same as with these keywords.\n\nExamples:\n\n```\nPass Execution  All features available in this version tested.    \nPass Execution  Deprecated test.  deprecated  -regression\n```\n\nThis keyword is typically wrapped to some other keyword, such as [Run Keyword If](#Run%20Keyword%20If), to pass based on a condition. The most common case can be handled also with [Pass Execution If](#Pass%20Execution%20If):\n\n```\nRun Keyword If  ${rc} < 0  Pass Execution  Negative values are cool.\nPass Execution If  ${rc} < 0  Negative values are cool.  \n```\n\nPassing execution in the middle of a test, setup or teardown should be used with care. In the worst case it leads to tests that skip all the parts that could actually uncover problems in the tested application. In cases where execution cannot continue do to external factors, it is often safer to fail the test case and make it non-critical.\n\nNew in Robot Framework 2.8."
        },
        {
            "name": "Pass Execution If",
            "args": [
                "condition",
                "message",
                "*tags"
            ],
            "doc": "Conditionally skips rest of the current test, setup, or teardown with PASS status.\n\nA wrapper for [Pass Execution](#Pass%20Execution) to skip rest of the current test, setup or teardown based the given `condition`. The condition is evaluated similarly as with [Should Be True](#Should%20Be%20True) keyword, and `message` and `*tags` have same semantics as with [Pass Execution](#Pass%20Execution).\n\nExample:\n\n```\n:FOR  ${var}  IN  @{VALUES}\n  Pass Execution If  '${var}' == 'EXPECTED'  Correct value was found\n  Do Something  ${var}  \n```\n\nNew in Robot Framework 2.8."
        },
        {
            "name": "Regexp Escape",
            "args": [
                "*patterns"
            ],
            "doc": "Returns each argument string escaped for use as a regular expression.\n\nThis keyword can be used to escape strings to be used with [Should Match Regexp](#Should%20Match%20Regexp) and [Should Not Match Regexp](#Should%20Not%20Match%20Regexp) keywords.\n\nEscaping is done with Python's `re.escape()` function.\n\nExamples:\n\n```\n${escaped} =  Regexp Escape  ${original}\n@{strings} =  Regexp Escape  @{strings}\n```"
        },
        {
            "name": "Reload Library",
            "args": [
                "name_or_instance"
            ],
            "doc": "Rechecks what keywords the specified library provides.\n\nCan be called explicitly in the test data or by a library itself when keywords it provides have changed.\n\nThe library can be specified by its name or as the active instance of the library. The latter is especially useful if the library itself calls this keyword as a method.\n\nNew in Robot Framework 2.9."
        },
        {
            "name": "Remove Tags",
            "args": [
                "*tags"
            ],
            "doc": "Removes given `tags` from the current test or all tests in a suite.\n\nTags can be given exactly or using a pattern where `*` matches anything and `?` matches one character.\n\nThis keyword can affect either one test case or all test cases in a test suite similarly as [Set Tags](#Set%20Tags) keyword.\n\nThe current tags are available as a built-in variable `@{TEST TAGS}`.\n\nExample:\n\n```\nRemove Tags  mytag  something-*  ?ython\n```\n\nSee [Set Tags](#Set%20Tags) if you want to add certain tags and [Fail](#Fail) if you want to fail the test case after setting and/or removing tags."
        },
        {
            "name": "Repeat Keyword",
            "args": [
                "repeat",
                "name",
                "*args"
            ],
            "doc": "Executes the specified keyword multiple times.\n\n`name` and `args` define the keyword that is executed similarly as with [Run Keyword](#Run%20Keyword). `repeat` specifies how many times (as a count) or how long time (as a timeout) the keyword should be executed.\n\nIf `repeat` is given as count, it specifies how many times the keyword should be executed. `repeat` can be given as an integer or as a string that can be converted to an integer. If it is a string, it can have postfix `times` or `x` (case and space insensitive) to make the expression more explicit.\n\nIf `repeat` is given as timeout, it must be in Robot Framework's time format (e.g. `1 minute`, `2 min 3 s`). Using a number alone (e.g. `1` or `1.5`) does not work in this context.\n\nIf `repeat` is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.\n\nExamples:\n\n```\nRepeat Keyword  5 times  Go to Previous Page    \nRepeat Keyword  ${var}  Some Keyword  arg1  arg2\nRepeat Keyword  2 minutes  Some Keyword  arg1  arg2\n```\n\nSpecifying `repeat` as a timeout is new in Robot Framework 3.0."
        },
        {
            "name": "Replace Variables",
            "args": [
                "text"
            ],
            "doc": "Replaces variables in the given text with their current values.\n\nIf the text contains undefined variables, this keyword fails. If the given `text` contains only a single variable, its value is returned as-is and it can be any object. Otherwise this keyword always returns a string.\n\nExample:\n\nThe file `template.txt` contains `Hello ${NAME}!` and variable `${NAME}` has the value `Robot`.\n\n```\n${template} =  Get File  ${CURDIR}/template.txt\n${message} =  Replace Variables  ${template}\nShould Be Equal  ${message}  Hello Robot!\n```"
        },
        {
            "name": "Return From Keyword",
            "args": [
                "*return_values"
            ],
            "doc": "Returns from the enclosing user keyword.\n\nThis keyword can be used to return from a user keyword with PASS status without executing it fully. It is also possible to return values similarly as with the `[Return]` setting. For more detailed information about working with the return values, see the User Guide.\n\nThis keyword is typically wrapped to some other keyword, such as [Run Keyword If](#Run%20Keyword%20If) or [Run Keyword If Test Passed](#Run%20Keyword%20If%20Test%20Passed), to return based on a condition:\n\n```\nRun Keyword If  ${rc} < 0  Return From Keyword\nRun Keyword If Test Passed  Return From Keyword  \n```\n\nIt is possible to use this keyword to return from a keyword also inside a for loop. That, as well as returning values, is demonstrated by the Find Index keyword in the following somewhat advanced example. Notice that it is often a good idea to move this kind of complicated logic into a test library.\n\n**\\*\\*\\*** Variables **\\*\\*\\***\n@{LIST} =    foo    baz\n\n**\\*\\*\\*** Test Cases **\\*\\*\\***\nExample\n    ${index} =    Find Index    baz    @{LIST}\n    Should Be Equal    ${index}    ${1}\n    ${index} =    Find Index    non existing    @{LIST}\n    Should Be Equal    ${index}    ${-1}\n\n**\\*\\*\\*** Keywords **\\*\\*\\***\nFind Index\n   \\[Arguments\\]    ${element}    @{items}\n   ${index} =    Set Variable    ${0}\n   :FOR    ${item}    IN    @{items}\n   \\\\    Run Keyword If    '${item}' == '${element}'    Return From Keyword    ${index}\n   \\\\    ${index} =    Set Variable    ${index + 1}\n   Return From Keyword    ${-1}    # Also \\[Return\\] would work here.\n\nThe most common use case, returning based on an expression, can be accomplished directly with [Return From Keyword If](#Return%20From%20Keyword%20If). Both of these keywords are new in Robot Framework 2.8.\n\nSee also [Run Keyword And Return](#Run%20Keyword%20And%20Return) and [Run Keyword And Return If](#Run%20Keyword%20And%20Return%20If)."
        },
        {
            "name": "Return From Keyword If",
            "args": [
                "condition",
                "*return_values"
            ],
            "doc": "Returns from the enclosing user keyword if `condition` is true.\n\nA wrapper for [Return From Keyword](#Return%20From%20Keyword) to return based on the given condition. The condition is evaluated using the same semantics as with [Should Be True](#Should%20Be%20True) keyword.\n\nGiven the same example as in [Return From Keyword](#Return%20From%20Keyword), we can rewrite the Find Index keyword as follows:\n\n**\\*\\*\\*** Keywords **\\*\\*\\***\nFind Index\n   \\[Arguments\\]    ${element}    @{items}\n   ${index} =    Set Variable    ${0}\n   :FOR    ${item}    IN    @{items}\n   \\\\    Return From Keyword If    '${item}' == '${element}'    ${index}\n   \\\\    ${index} =    Set Variable    ${index + 1}\n   Return From Keyword    ${-1}    # Also \\[Return\\] would work here.\n\nSee also [Run Keyword And Return](#Run%20Keyword%20And%20Return) and [Run Keyword And Return If](#Run%20Keyword%20And%20Return%20If).\n\nNew in Robot Framework 2.8."
        },
        {
            "name": "Run Keyword",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Executes the given keyword with the given arguments.\n\nBecause the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line."
        },
        {
            "name": "Run Keyword And Continue On Failure",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the keyword and continues execution even if a failure occurs.\n\nThe keyword name and arguments work as with [Run Keyword](#Run%20Keyword).\n\nExample:\n\n```\nRun Keyword And Continue On Failure  Fail  This is a stupid example\nLog  This keyword is executed  \n```\n\nThe execution is not continued if the failure is caused by invalid syntax, timeout, or fatal exception. Since Robot Framework 2.9, variable errors are caught by this keyword."
        },
        {
            "name": "Run Keyword And Expect Error",
            "args": [
                "expected_error",
                "name",
                "*args"
            ],
            "doc": "Runs the keyword and checks that the expected error occurred.\n\nThe expected error must be given in the same format as in Robot Framework reports. It can be a pattern containing characters `?`, which matches to any single character and `*`, which matches to any number of any characters. `name` and `*args` have same semantics as with [Run Keyword](#Run%20Keyword).\n\nIf the expected error occurs, the error message is returned and it can be further processed/tested, if needed. If there is no error, or the error does not match the expected error, this keyword fails.\n\nExamples:\n\n```\nRun Keyword And Expect Error  My error  Some Keyword  arg1  arg2\n${msg} =  Run Keyword And Expect Error  *  My KW  \nShould Start With  ${msg}  Once upon a time in    \n```\n\nErrors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Since Robot Framework 2.9, variable errors are caught by this keyword."
        },
        {
            "name": "Run Keyword And Ignore Error",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments and ignores possible error.\n\nThis keyword returns two values, so that the first is either string `PASS` or `FAIL`, depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message. See [Run Keyword And Return Status](#Run%20Keyword%20And%20Return%20Status) If you are only interested in the execution status.\n\nThe keyword name and arguments work as in [Run Keyword](#Run%20Keyword). See [Run Keyword If](#Run%20Keyword%20If) for a usage example.\n\nErrors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails. Since Robot Framework 2.9, variable errors are caught by this keyword."
        },
        {
            "name": "Run Keyword And Return",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the specified keyword and returns from the enclosing user keyword.\n\nThe keyword to execute is defined with `name` and `*args` exactly like with [Run Keyword](#Run%20Keyword). After running the keyword, returns from the enclosing user keyword and passes possible return value from the executed keyword further. Returning from a keyword has exactly same semantics as with [Return From Keyword](#Return%20From%20Keyword).\n\nExample:\n\n```\nRun Keyword And Return  My Keyword  arg1  arg2\n# Above is equivalent to:      \n${result} =  My Keyword  arg1  arg2\nReturn From Keyword  ${result}    \n```\n\nUse [Run Keyword And Return If](#Run%20Keyword%20And%20Return%20If) if you want to run keyword and return based on a condition.\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Run Keyword And Return If",
            "args": [
                "condition",
                "name",
                "*args"
            ],
            "doc": "Runs the specified keyword and returns from the enclosing user keyword.\n\nA wrapper for [Run Keyword And Return](#Run%20Keyword%20And%20Return) to run and return based on the given `condition`. The condition is evaluated using the same semantics as with [Should Be True](#Should%20Be%20True) keyword.\n\nExample:\n\n```\nRun Keyword And Return If  ${rc} > 0  My Keyword  arg1  arg2  \n# Above is equivalent to:          \nRun Keyword If  ${rc} > 0  Run Keyword And Return  My Keyword  arg1  arg2\n```\n\nUse [Return From Keyword If](#Return%20From%20Keyword%20If) if you want to return a certain value based on a condition.\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Run Keyword And Return Status",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.\n\nThis keyword returns Boolean `True` if the keyword that is executed succeeds and `False` if it fails. This is useful, for example, in combination with [Run Keyword If](#Run%20Keyword%20If). If you are interested in the error message or return value, use [Run Keyword And Ignore Error](#Run%20Keyword%20And%20Ignore%20Error) instead.\n\nThe keyword name and arguments work as in [Run Keyword](#Run%20Keyword).\n\nExample:\n\n```\n${passed} =  Run Keyword And Return Status  Keyword  args\nRun Keyword If  ${passed}  Another keyword  \n```\n\nErrors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.\n\nNew in Robot Framework 2.7.6."
        },
        {
            "name": "Run Keyword If",
            "args": [
                "condition",
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if `condition` is true.\n\nThe given `condition` is evaluated in Python as explained in [Evaluating expressions](#Evaluating%20expressions), and `name` and `*args` have same semantics as with [Run Keyword](#Run%20Keyword).\n\nExample, a simple if/else construct:\n\n```\n${status}  ${value} =  Run Keyword And Ignore Error  My Keyword\nRun Keyword If  '${status}' == 'PASS'  Some Action  arg\nRun Keyword Unless  '${status}' == 'PASS'  Another Action  \n```\n\nIn this example, only either Some Action or Another Action is executed, based on the status of My Keyword. Instead of [Run Keyword And Ignore Error](#Run%20Keyword%20And%20Ignore%20Error) you can also use [Run Keyword And Return Status](#Run%20Keyword%20And%20Return%20Status).\n\nVariables used like `${variable}`, as in the examples above, are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using special syntax `$variable`. This is a new feature in Robot Framework 2.9 and it is explained more thoroughly in [Evaluating expressions](#Evaluating%20expressions).\n\nExample:\n\n```\nRun Keyword If  $result is None or $result == 'FAIL'  Keyword\n```\n\nStarting from Robot version 2.7.4, this keyword supports also optional ELSE and ELSE IF branches. Both of these are defined in `*args` and must use exactly format `ELSE` or `ELSE IF`, respectively. ELSE branches must contain first the name of the keyword to execute and then its possible arguments. ELSE IF branches must first contain a condition, like the first argument to this keyword, and then the keyword to execute and its possible arguments. It is possible to have ELSE branch after ELSE IF and to have multiple ELSE IF branches.\n\nGiven previous example, if/else construct can also be created like this:\n\n```\n${status}  ${value} =  Run Keyword And Ignore Error  My Keyword    \nRun Keyword If  '${status}' == 'PASS'  Some Action  arg  ELSE  Another Action\n```\n\nThe return value is the one of the keyword that was executed or None if no keyword was executed (i.e. if `condition` was false). Hence, it is recommended to use ELSE and/or ELSE IF branches to conditionally assign return values from keyword to variables (to conditionally assign fixed values to variables, see [Set Variable If](#Set%20Variable%20If)). This is illustrated by the example below:\n\n```\n${var1} =  Run Keyword If  ${rc} == 0  Some keyword returning a value    \n...  ELSE IF  0 < ${rc} < 42  Another keyword    \n...  ELSE IF  ${rc} < 0  Another keyword with args  ${rc}  arg2\n...  ELSE  Final keyword to handle abnormal cases  ${rc}    \n${var2} =  Run Keyword If  ${condition}  Some keyword    \n```\n\nIn this example, ${var2} will be set to None if ${condition} is false.\n\nNotice that `ELSE` and `ELSE IF` control words must be used explicitly and thus cannot come from variables. If you need to use literal `ELSE` and `ELSE IF` strings as arguments, you can escape them with a backslash like `\\ELSE` and `\\ELSE IF`.\n\nStarting from Robot Framework 2.8, Python's [os](http://docs.python.org/2/library/os.html) and [sys](http://docs.python.org/2/library/sys.html) modules are automatically imported when evaluating the `condition`. Attributes they contain can thus be used in the condition:\n\n```\nRun Keyword If  os.sep == '/'  Unix Keyword  \n...  ELSE IF  sys.platform.startswith('java')  Jython Keyword\n...  ELSE  Windows Keyword  \n```"
        },
        {
            "name": "Run Keyword If All Critical Tests Passed",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if all critical tests passed.\n\nThis keyword can only be used in suite teardown. Trying to use it in any other place will result in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details."
        },
        {
            "name": "Run Keyword If All Tests Passed",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if all tests passed.\n\nThis keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details."
        },
        {
            "name": "Run Keyword If Any Critical Tests Failed",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if any critical tests failed.\n\nThis keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details."
        },
        {
            "name": "Run Keyword If Any Tests Failed",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if one or more tests failed.\n\nThis keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details."
        },
        {
            "name": "Run Keyword If Test Failed",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if the test failed.\n\nThis keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details.\n\nPrior to Robot Framework 2.9 failures in test teardown itself were not detected by this keyword."
        },
        {
            "name": "Run Keyword If Test Passed",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if the test passed.\n\nThis keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details.\n\nPrior to Robot Framework 2.9 failures in test teardown itself were not detected by this keyword."
        },
        {
            "name": "Run Keyword If Timeout Occurred",
            "args": [
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword if either a test or a keyword timeout has occurred.\n\nThis keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.\n\nOtherwise, this keyword works exactly like [Run Keyword](#Run%20Keyword), see its documentation for more details."
        },
        {
            "name": "Run Keyword Unless",
            "args": [
                "condition",
                "name",
                "*args"
            ],
            "doc": "Runs the given keyword with the given arguments, if `condition` is false.\n\nSee [Run Keyword If](#Run%20Keyword%20If) for more information and an example."
        },
        {
            "name": "Run Keywords",
            "args": [
                "*keywords"
            ],
            "doc": "Executes all the given keywords in a sequence.\n\nThis keyword is mainly useful in setups and teardowns when they need to take care of multiple actions and creating a new higher level user keyword would be an overkill.\n\nBy default all arguments are expected to be keywords to be executed.\n\nExamples:\n\n```\nRun Keywords  Initialize database  Start servers  Clear logs\nRun Keywords  ${KW 1}  ${KW 2}  \nRun Keywords  @{KEYWORDS}    \n```\n\nStarting from Robot Framework 2.7.6, keywords can also be run with arguments using upper case `AND` as a separator between keywords. The keywords are executed so that the first argument is the first keyword and proceeding arguments until the first `AND` are arguments to it. First argument after the first `AND` is the second keyword and proceeding arguments until the next `AND` are its arguments. And so on.\n\nExamples:\n\n```\nRun Keywords  Initialize database  db1  AND  Start servers  server1  server2  \nRun Keywords  Initialize database  ${DB NAME}  AND  Start servers  @{SERVERS}  AND  Clear logs\nRun Keywords  ${KW}  AND  @{KW WITH ARGS}        \n```\n\nNotice that the `AND` control argument must be used explicitly and cannot itself come from a variable. If you need to use literal `AND` string as argument, you can either use variables or escape it with a backslash like `\\AND`."
        },
        {
            "name": "Set Global Variable",
            "args": [
                "name",
                "*values"
            ],
            "doc": "Makes a variable available globally in all tests and suites.\n\nVariables set with this keyword are globally available in all test cases and suites executed after setting them. Setting variables with this keyword thus has the same effect as creating from the command line using the options `--variable` or `--variablefile`. Because this keyword can change variables everywhere, it should be used with care.\n\nSee [Set Suite Variable](#Set%20Suite%20Variable) for more information and examples."
        },
        {
            "name": "Set Library Search Order",
            "args": [
                "*search_order"
            ],
            "doc": "Sets the resolution order to use when a name matches multiple keywords.\n\nThe library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords. The first library (or resource, see below) containing the keyword is selected and that keyword implementation used. If the keyword is not found from any library (or resource), test executing fails the same way as when the search order is not set.\n\nWhen this keyword is used, there is no need to use the long `LibraryName.Keyword Name` notation. For example, instead of having\n\n```\nMyLibrary.Keyword  arg\nMyLibrary.Another Keyword  \nMyLibrary.Keyword  xxx\n```\n\nyou can have\n\n```\nSet Library Search Order  MyLibrary\nKeyword  arg\nAnother Keyword  \nKeyword  xxx\n```\n\nThis keyword can be used also to set the order of keywords in different resource files. In this case resource names must be given without paths or extensions like:\n\n```\nSet Library Search Order  resource  another_resource\n```\n\n**NOTE:**\n\n*   The search order is valid only in the suite where this keywords is used.\n*   Keywords in resources always have higher priority than keywords in libraries regardless the search order.\n*   The old order is returned and can be used to reset the search order later.\n*   Library and resource names in the search order are both case and space insensitive."
        },
        {
            "name": "Set Log Level",
            "args": [
                "level"
            ],
            "doc": "Sets the log threshold to the specified level and returns the old level.\n\nMessages below the level will not logged. The default logging level is INFO, but it can be overridden with the command line option `--loglevel`.\n\nThe available levels: TRACE, DEBUG, INFO (default), WARN, ERROR and NONE (no logging)."
        },
        {
            "name": "Set Suite Documentation",
            "args": [
                "doc",
                "append=False",
                "top=False"
            ],
            "doc": "Sets documentation for the current test suite.\n\nBy default the possible existing documentation is overwritten, but this can be changed using the optional `append` argument similarly as with [Set Test Message](#Set%20Test%20Message) keyword.\n\nThis keyword sets the documentation of the current suite by default. If the optional `top` argument is given a true value (see [Boolean arguments](#Boolean%20arguments)), the documentation of the top level suite is altered instead.\n\nThe documentation of the current suite is available as a built-in variable `${SUITE DOCUMENTATION}`.\n\nNew in Robot Framework 2.7. Support for `append` and `top` were added in 2.7.7."
        },
        {
            "name": "Set Suite Metadata",
            "args": [
                "name",
                "value",
                "append=False",
                "top=False"
            ],
            "doc": "Sets metadata for the current test suite.\n\nBy default possible existing metadata values are overwritten, but this can be changed using the optional `append` argument similarly as with [Set Test Message](#Set%20Test%20Message) keyword.\n\nThis keyword sets the metadata of the current suite by default. If the optional `top` argument is given a true value (see [Boolean arguments](#Boolean%20arguments)), the metadata of the top level suite is altered instead.\n\nThe metadata of the current suite is available as a built-in variable `${SUITE METADATA}` in a Python dictionary. Notice that modifying this variable directly has no effect on the actual metadata the suite has.\n\nNew in Robot Framework 2.7.4. Support for `append` and `top` were added in 2.7.7."
        },
        {
            "name": "Set Suite Variable",
            "args": [
                "name",
                "*values"
            ],
            "doc": "Makes a variable available everywhere within the scope of the current suite.\n\nVariables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variable table in the test data file or importing them from variable files.\n\nPossible child test suites do not see variables set with this keyword by default. Starting from Robot Framework 2.9, that can be controlled by using `children=<option>` as the last argument. If the specified `<option>` is a non-empty string or any other value considered true in Python, the variable is set also to the child suites. Parent and sibling suites will never see variables set with this keyword.\n\nThe name of the variable can be given either as a normal variable name (e.g. `${NAME}`) or in escaped format as `\\${NAME}` or `$NAME`. Variable value can be given using the same syntax as when variables are created in the Variable table.\n\nIf a variable already exists within the new scope, its value will be overwritten. Otherwise a new variable is created. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.\n\nExamples:\n\n```\nSet Suite Variable  ${SCALAR}  Hello, world!  \nSet Suite Variable  ${SCALAR}  Hello, world!  children=true\nSet Suite Variable  @{LIST}  First item  Second item\nSet Suite Variable  &{DICT}  key=value  foo=bar\n${ID} =  Get ID    \nSet Suite Variable  ${ID}    \n```\n\nTo override an existing value with an empty value, use built-in variables `${EMPTY}`, `@{EMPTY}` or `&{EMPTY}`:\n\n```\nSet Suite Variable  ${SCALAR}  ${EMPTY}  \nSet Suite Variable  @{LIST}  @{EMPTY}  # New in RF 2.7.4\nSet Suite Variable  &{DICT}  &{EMPTY}  # New in RF 2.9\n```\n\n**NOTE:** If the variable has value which itself is a variable (escaped or not), you must always use the escaped format to set the variable:\n\nExample:\n\n```\n${NAME} =  Set Variable  \\${var}  \nSet Suite Variable  ${NAME}  value  # Sets variable ${var}\nSet Suite Variable  \\${NAME}  value  # Sets variable ${NAME}\n```\n\nThis limitation applies also to [Set Test Variable](#Set%20Test%20Variable), [Set Global Variable](#Set%20Global%20Variable), [Variable Should Exist](#Variable%20Should%20Exist), [Variable Should Not Exist](#Variable%20Should%20Not%20Exist) and [Get Variable Value](#Get%20Variable%20Value) keywords."
        },
        {
            "name": "Set Tags",
            "args": [
                "*tags"
            ],
            "doc": "Adds given `tags` for the current test or all tests in a suite.\n\nWhen this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.\n\nIf this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.\n\nThe current tags are available as a built-in variable `@{TEST TAGS}`.\n\nSee [Remove Tags](#Remove%20Tags) if you want to remove certain tags and [Fail](#Fail) if you want to fail the test case after setting and/or removing tags."
        },
        {
            "name": "Set Test Documentation",
            "args": [
                "doc",
                "append=False"
            ],
            "doc": "Sets documentation for the current test case.\n\nBy default the possible existing documentation is overwritten, but this can be changed using the optional `append` argument similarly as with [Set Test Message](#Set%20Test%20Message) keyword.\n\nThe current test documentation is available as a built-in variable `${TEST DOCUMENTATION}`. This keyword can not be used in suite setup or suite teardown.\n\nNew in Robot Framework 2.7. Support for `append` was added in 2.7.7."
        },
        {
            "name": "Set Test Message",
            "args": [
                "message",
                "append=False"
            ],
            "doc": "Sets message for the current test case.\n\nIf the optional `append` argument is given a true value (see [Boolean arguments](#Boolean%20arguments)), the given `message` is added after the possible earlier message by joining the messages with a space.\n\nIn test teardown this keyword can alter the possible failure message, but otherwise failures override messages set by this keyword. Notice that in teardown the message is available as a built-in variable `${TEST MESSAGE}`.\n\nIt is possible to use HTML format in the message by starting the message with `*HTML*`.\n\nExamples:\n\n```\nSet Test Message  My message  \nSet Test Message  is continued.  append=yes\nShould Be Equal  ${TEST MESSAGE}  My message is continued.\nSet Test Message  *HTML* <b>Hello!</b>  \n```\n\nThis keyword can not be used in suite setup or suite teardown.\n\nSupport for `append` was added in Robot Framework 2.7.7 and support for HTML format in 2.8."
        },
        {
            "name": "Set Test Variable",
            "args": [
                "name",
                "*values"
            ],
            "doc": "Makes a variable available everywhere within the scope of the current test.\n\nVariables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.\n\nSee [Set Suite Variable](#Set%20Suite%20Variable) for more information and examples."
        },
        {
            "name": "Set Variable",
            "args": [
                "*values"
            ],
            "doc": "Returns the given values which can then be assigned to a variables.\n\nThis keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables. It is recommended to use [Create List](#Create%20List) when creating new lists.\n\nExamples:\n\n```\n${hi} =  Set Variable  Hello, world!    \n${hi2} =  Set Variable  I said: ${hi}    \n${var1}  ${var2} =  Set Variable  Hello  world\n@{list} =  Set Variable  ${list with some items}    \n${item1}  ${item2} =  Set Variable  ${list with 2 items}  \n```\n\nVariables created with this keyword are available only in the scope where they are created. See [Set Global Variable](#Set%20Global%20Variable), [Set Test Variable](#Set%20Test%20Variable) and [Set Suite Variable](#Set%20Suite%20Variable) for information on how to set variables so that they are available also in a larger scope."
        },
        {
            "name": "Set Variable If",
            "args": [
                "condition",
                "*values"
            ],
            "doc": "Sets variable based on the given condition.\n\nThe basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the [Should Be True](#Should%20Be%20True) keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where `${rc}` is assumed to be zero.\n\n```\n${var1} =  Set Variable If  ${rc} == 0  zero  nonzero\n${var2} =  Set Variable If  ${rc} > 0  value1  value2\n${var3} =  Set Variable If  ${rc} > 0  whatever  \n```\n\n\\=>\n\n${var1} = 'zero'\n${var2} = 'value2'\n${var3} = None\n\nIt is also possible to have 'else if' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.\n\n```\n${var} =  Set Variable If  ${rc} == 0  zero\n...  ${rc} > 0  greater than zero  less then zero\n      \n${var} =  Set Variable If    \n...  ${rc} == 0  zero  \n...  ${rc} == 1  one  \n...  ${rc} == 2  two  \n...  ${rc} > 2  greater than two  \n...  ${rc} < 0  less than zero  \n```\n\nUse [Get Variable Value](#Get%20Variable%20Value) if you need to set variables dynamically based on whether a variable exist or not."
        },
        {
            "name": "Should Be Empty",
            "args": [
                "item",
                "msg=None"
            ],
            "doc": "Verifies that the given item is empty.\n\nThe length of the item is got using the [Get Length](#Get%20Length) keyword. The default error message can be overridden with the `msg` argument."
        },
        {
            "name": "Should Be Equal",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the given objects are unequal.\n\nOptional `msg` and `values` arguments specify how to construct the error message if this keyword fails:\n\n*   If `msg` is not given, the error message is `<first> != <second>`.\n*   If `msg` is given and `values` gets a true value (default), the error message is `<msg>: <first> != <second>`.\n*   If `msg` is given and `values` gets a false value, the error message is simply `<msg>`. See [Boolean arguments](#Boolean%20arguments) for more details about using false values.\n\nIf `ignore_case` is given a true value (see [Boolean arguments](#Boolean%20arguments)) and arguments are strings, it indicates that comparison should be case-insensitive. New option in Robot Framework 3.0.1.\n\nIf both arguments are multiline strings, the comparison is done using [multiline string comparisons](#Multiline%20string%20comparisons).\n\nExamples:\n\n```\nShould Be Equal  ${x}  expected    \nShould Be Equal  ${x}  expected  Custom error message  \nShould Be Equal  ${x}  expected  Custom message  values=False\nShould Be Equal  ${x}  expected  ignore_case=True  \n```"
        },
        {
            "name": "Should Be Equal As Integers",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "base=None"
            ],
            "doc": "Fails if objects are unequal after converting them to integers.\n\nSee [Convert To Integer](#Convert%20To%20Integer) for information how to convert integers from other bases than 10 using `base` argument or `0b/0o/0x` prefixes.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`.\n\nExamples:\n\n```\nShould Be Equal As Integers  42  ${42}  Error message\nShould Be Equal As Integers  ABCD  abcd  base=16\nShould Be Equal As Integers  0b1011  11  \n```"
        },
        {
            "name": "Should Be Equal As Numbers",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "precision=6"
            ],
            "doc": "Fails if objects are unequal after converting them to real numbers.\n\nThe conversion is done with [Convert To Number](#Convert%20To%20Number) keyword using the given `precision`.\n\nExamples:\n\n```\nShould Be Equal As Numbers  ${x}  1.1    # Passes if ${x} is 1.1\nShould Be Equal As Numbers  1.123  1.1  precision=1  # Passes\nShould Be Equal As Numbers  1.123  1.4  precision=0  # Passes\nShould Be Equal As Numbers  112.3  75  precision=-2  # Passes\n```\n\nAs discussed in the documentation of [Convert To Number](#Convert%20To%20Number), machines generally cannot store floating point numbers accurately. Because of this limitation, comparing floats for equality is problematic and a correct approach to use depends on the context. This keyword uses a very naive approach of rounding the numbers before comparing them, which is both prone to rounding errors and does not work very well if numbers are really big or small. For more information about comparing floats, and ideas on how to implement your own context specific comparison algorithm, see [http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/](http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/).\n\nSee [Should Not Be Equal As Numbers](#Should%20Not%20Be%20Equal%20As%20Numbers) for a negative version of this keyword and [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`."
        },
        {
            "name": "Should Be Equal As Strings",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if objects are unequal after converting them to strings.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`.\n\nIf `ignore_case` is given a true value (see [Boolean arguments](#Boolean%20arguments)), it indicates that comparison should be case-insensitive. New option in Robot Framework 3.0.1.\n\nIf both arguments are multiline strings, the comparison is done using [multiline string comparisons](#Multiline%20string%20comparisons)."
        },
        {
            "name": "Should Be True",
            "args": [
                "condition",
                "msg=None"
            ],
            "doc": "Fails if the given condition is not true.\n\nIf `condition` is a string (e.g. `${rc} < 10`), it is evaluated as a Python expression as explained in [Evaluating expressions](#Evaluating%20expressions) and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its [truth value](http://docs.python.org/2/library/stdtypes.html#truth).\n\nThe default error message (`<condition> should be true`) is not very informative, but it can be overridden with the `msg` argument.\n\nExamples:\n\n```\nShould Be True  ${rc} < 10  \nShould Be True  '${status}' == 'PASS'  # Strings must be quoted\nShould Be True  ${number}  # Passes if ${number} is not zero\nShould Be True  ${list}  # Passes if ${list} is not empty\n```\n\nVariables used like `${variable}`, as in the examples above, are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using special syntax `$variable`. This is a new feature in Robot Framework 2.9 and it is explained more thoroughly in [Evaluating expressions](#Evaluating%20expressions).\n\nExamples:\n\n```\nShould Be True  $rc < 10  \nShould Be True  $status == 'PASS'  # Expected string must be quoted\n```\n\nStarting from Robot Framework 2.8, [Should Be True](#Should%20Be%20True) automatically imports Python's [os](http://docs.python.org/2/library/os.html) and [sys](http://docs.python.org/2/library/sys.html) modules that contain several useful attributes:\n\n```\nShould Be True  os.linesep == '\\n'  # Unixy\nShould Be True  os.linesep == '\\r\\n'  # Windows\nShould Be True  sys.platform == 'darwin'  # OS X\nShould Be True  sys.platform.startswith('java')  # Jython\n```"
        },
        {
            "name": "Should Contain",
            "args": [
                "container",
                "item",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if `container` does not contain `item` one or more times.\n\nWorks with strings, lists, and anything that supports Python's `in` operator.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with arguments `msg` and `values`.\n\nIf `ignore_case` is given a true value (see [Boolean arguments](#Boolean%20arguments)) and compared items are strings, it indicates that comparison should be case-insensitive. If the `container` is a list-like object, string items in it are compared case-insensitively. New option in Robot Framework 3.0.1.\n\nExamples:\n\n```\nShould Contain  ${output}  PASS    \nShould Contain  ${some list}  value  msg=Failure!  values=False\nShould Contain  ${some list}  value  case_insensitive=True  \n```"
        },
        {
            "name": "Should Contain Any",
            "args": [
                "container",
                "*items",
                "**configuration"
            ],
            "doc": "Fails if `container` does not contain any of the `*items`.\n\nWorks with strings, lists, and anything that supports Python's `in` operator.\n\nSupports additional configuration parameters `msg`, `values` and `ignore_case`, which have exactly the same semantics as arguments with same names have with [Should Contain](#Should%20Contain). These arguments must always be given using `name=value` syntax after all `items`.\n\nNote that possible equal signs in `items` must be escaped with a backslash (e.g. `foo\\=bar`) to avoid them to be passed in as `**configuration`.\n\nExamples:\n\n```\nShould Contain Any  ${string}  substring 1  substring 2    \nShould Contain Any  ${list}  item 1  item 2  item 3  \nShould Contain Any  ${list}  item 1  item 2  item 3  ignore_case=True\nShould Contain Any  ${list}  @{items}  msg=Custom message  values=False  \n```\n\nNew in Robot Framework 3.0.1."
        },
        {
            "name": "Should Contain X Times",
            "args": [
                "item1",
                "item2",
                "count",
                "msg=None",
                "ignore_case=False"
            ],
            "doc": "Fails if `item1` does not contain `item2` `count` times.\n\nWorks with strings, lists and all objects that [Get Count](#Get%20Count) works with. The default error message can be overridden with `msg` and the actual count is always logged.\n\nIf `ignore_case` is given a true value (see [Boolean arguments](#Boolean%20arguments)) and compared items are strings, it indicates that comparison should be case-insensitive. If the `item1` is a list-like object, string items in it are compared case-insensitively. New option in Robot Framework 3.0.1.\n\nExamples:\n\n```\nShould Contain X Times  ${output}  hello  2  \nShould Contain X Times  ${some list}  value  3  ignore_case=True\n```"
        },
        {
            "name": "Should End With",
            "args": [
                "str1",
                "str2",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the string `str1` does not end with the string `str2`.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`, as well as for semantics of the `ignore_case` option."
        },
        {
            "name": "Should Match",
            "args": [
                "string",
                "pattern",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails unless the given `string` matches the given `pattern`.\n\nPattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern, `*` matches to anything and `?` matches to any single character.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`, as well as for semantics of the `ignore_case` option."
        },
        {
            "name": "Should Match Regexp",
            "args": [
                "string",
                "pattern",
                "msg=None",
                "values=True"
            ],
            "doc": "Fails if `string` does not match `pattern` as a regular expression.\n\nRegular expression check is implemented using the Python [re module](http://docs.python.org/2/library/re.html). Python's regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used, for example, in Java, Ruby and .NET.\n\nThings to note about the regexp syntax in Robot Framework test data:\n\n1) Backslash is an escape character in the test data, and possible backslashes in the pattern must thus be escaped with another backslash (e.g. `\\\\d\\\\w+`).\n\n2) Strings that may contain special characters, but should be handled as literal strings, can be escaped with the [Regexp Escape](#Regexp%20Escape) keyword.\n\n3) The given pattern does not need to match the whole string. For example, the pattern `ello` matches the string `Hello world!`. If a full match is needed, the `^` and `$` characters can be used to denote the beginning and end of the string, respectively. For example, `^ello$` only matches the exact string `ello`.\n\n4) Possible flags altering how the expression is parsed (e.g. `re.IGNORECASE`, `re.MULTILINE`) can be set by prefixing the pattern with the `(?iLmsux)` group like `(?im)pattern`. The available flags are `i` (case-insensitive), `m` (multiline mode), `s` (dotall mode), `x` (verbose), `u` (Unicode dependent) and `L` (locale dependent).\n\nIf this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.\n\nSee the [Should Be Equal](#Should%20Be%20Equal) keyword for an explanation on how to override the default error message with the `msg` and `values` arguments.\n\nExamples:\n\n```\nShould Match Regexp  ${output}  \\\\d{6}  # Output contains six numbers\nShould Match Regexp  ${output}  ^\\\\d{6}$  # Six numbers and nothing more\n${ret} =  Should Match Regexp  Foo: 42  (?i)foo: \\\\d+\n${match}  ${group1}  ${group2} =  \n...  Should Match Regexp  Bar: 43  (Foo|Bar): (\\\\d+)\n```\n\n\\=>\n\n${ret} = 'Foo: 42'\n${match} = 'Bar: 43'\n${group1} = 'Bar'\n${group2} = '43'"
        },
        {
            "name": "Should Not Be Empty",
            "args": [
                "item",
                "msg=None"
            ],
            "doc": "Verifies that the given item is not empty.\n\nThe length of the item is got using the [Get Length](#Get%20Length) keyword. The default error message can be overridden with the `msg` argument."
        },
        {
            "name": "Should Not Be Equal",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the given objects are equal.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`.\n\nIf `ignore_case` is given a true value (see [Boolean arguments](#Boolean%20arguments)) and both arguments are strings, it indicates that comparison should be case-insensitive. New option in Robot Framework 3.0.1."
        },
        {
            "name": "Should Not Be Equal As Integers",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "base=None"
            ],
            "doc": "Fails if objects are equal after converting them to integers.\n\nSee [Convert To Integer](#Convert%20To%20Integer) for information how to convert integers from other bases than 10 using `base` argument or `0b/0o/0x` prefixes.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`.\n\nSee [Should Be Equal As Integers](#Should%20Be%20Equal%20As%20Integers) for some usage examples."
        },
        {
            "name": "Should Not Be Equal As Numbers",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "precision=6"
            ],
            "doc": "Fails if objects are equal after converting them to real numbers.\n\nThe conversion is done with [Convert To Number](#Convert%20To%20Number) keyword using the given `precision`.\n\nSee [Should Be Equal As Numbers](#Should%20Be%20Equal%20As%20Numbers) for examples on how to use `precision` and why it does not always work as expected. See also [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`."
        },
        {
            "name": "Should Not Be Equal As Strings",
            "args": [
                "first",
                "second",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if objects are equal after converting them to strings.\n\nIf `ignore_case` is given a true value (see [Boolean arguments](#Boolean%20arguments)), it indicates that comparison should be case-insensitive. New option in Robot Framework 3.0.1.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`."
        },
        {
            "name": "Should Not Be True",
            "args": [
                "condition",
                "msg=None"
            ],
            "doc": "Fails if the given condition is true.\n\nSee [Should Be True](#Should%20Be%20True) for details about how `condition` is evaluated and how `msg` can be used to override the default error message."
        },
        {
            "name": "Should Not Contain",
            "args": [
                "container",
                "item",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if `container` contains `item` one or more times.\n\nWorks with strings, lists, and anything that supports Python's `in` operator.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with arguments `msg` and `values`. `ignore_case` has exactly the same semantics as with [Should Contain](#Should%20Contain).\n\nExamples:\n\n```\nShould Not Contain  ${some list}  value  \nShould Not Contain  ${output}  FAILED  ignore_case=True\n```"
        },
        {
            "name": "Should Not Contain Any",
            "args": [
                "container",
                "*items",
                "**configuration"
            ],
            "doc": "Fails if `container` contains one or more of the `*items`.\n\nWorks with strings, lists, and anything that supports Python's `in` operator.\n\nSupports additional configuration parameters `msg`, `values` and `ignore_case`, which have exactly the same semantics as arguments with same names have with [Should Contain](#Should%20Contain). These arguments must always be given using `name=value` syntax after all `items`.\n\nNote that possible equal signs in `items` must be escaped with a backslash (e.g. `foo\\=bar`) to avoid them to be passed in as `**configuration`.\n\nExamples:\n\n```\nShould Not Contain Any  ${string}  substring 1  substring 2    \nShould Not Contain Any  ${list}  item 1  item 2  item 3  \nShould Not Contain Any  ${list}  item 1  item 2  item 3  ignore_case=True\nShould Not Contain Any  ${list}  @{items}  msg=Custom message  values=False  \n```\n\nNew in Robot Framework 3.0.1."
        },
        {
            "name": "Should Not End With",
            "args": [
                "str1",
                "str2",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the string `str1` ends with the string `str2`.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`, as well as for semantics of the `ignore_case` option."
        },
        {
            "name": "Should Not Match",
            "args": [
                "string",
                "pattern",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the given `string` matches the given `pattern`.\n\nPattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern `*` matches to anything and `?` matches to any single character.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`, as well as for semantics of the `ignore_case` option."
        },
        {
            "name": "Should Not Match Regexp",
            "args": [
                "string",
                "pattern",
                "msg=None",
                "values=True"
            ],
            "doc": "Fails if `string` matches `pattern` as a regular expression.\n\nSee [Should Match Regexp](#Should%20Match%20Regexp) for more information about arguments."
        },
        {
            "name": "Should Not Start With",
            "args": [
                "str1",
                "str2",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the string `str1` starts with the string `str2`.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`, as well as for semantics of the `ignore_case` option."
        },
        {
            "name": "Should Start With",
            "args": [
                "str1",
                "str2",
                "msg=None",
                "values=True",
                "ignore_case=False"
            ],
            "doc": "Fails if the string `str1` does not start with the string `str2`.\n\nSee [Should Be Equal](#Should%20Be%20Equal) for an explanation on how to override the default error message with `msg` and `values`, as well as for semantics of the `ignore_case` option."
        },
        {
            "name": "Sleep",
            "args": [
                "time_",
                "reason=None"
            ],
            "doc": "Pauses the test executed for the given time.\n\n`time` may be either a number or a time string. Time strings are in a format such as `1 day 2 hours 3 minutes 4 seconds 5milliseconds` or `1d 2h 3m 4s 5ms`, and they are fully explained in an appendix of Robot Framework User Guide. Optional reason can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.\n\nExamples:\n\n```\nSleep  42  \nSleep  1.5  \nSleep  2 minutes 10 seconds  \nSleep  10s  Wait for a reply\n```"
        },
        {
            "name": "Variable Should Exist",
            "args": [
                "name",
                "msg=None"
            ],
            "doc": "Fails unless the given variable exists within the current scope.\n\nThe name of the variable can be given either as a normal variable name (e.g. `${NAME}`) or in escaped format (e.g. `\\${NAME}`). Notice that the former has some limitations explained in [Set Suite Variable](#Set%20Suite%20Variable).\n\nThe default error message can be overridden with the `msg` argument.\n\nSee also [Variable Should Not Exist](#Variable%20Should%20Not%20Exist) and [Keyword Should Exist](#Keyword%20Should%20Exist)."
        },
        {
            "name": "Variable Should Not Exist",
            "args": [
                "name",
                "msg=None"
            ],
            "doc": "Fails if the given variable exists within the current scope.\n\nThe name of the variable can be given either as a normal variable name (e.g. `${NAME}`) or in escaped format (e.g. `\\${NAME}`). Notice that the former has some limitations explained in [Set Suite Variable](#Set%20Suite%20Variable).\n\nThe default error message can be overridden with the `msg` argument.\n\nSee also [Variable Should Exist](#Variable%20Should%20Exist) and [Keyword Should Exist](#Keyword%20Should%20Exist)."
        },
        {
            "name": "Wait Until Keyword Succeeds",
            "args": [
                "retry",
                "retry_interval",
                "name",
                "*args"
            ],
            "doc": "Runs the specified keyword and retries if it fails.\n\n`name` and `args` define the keyword that is executed similarly as with [Run Keyword](#Run%20Keyword). How long to retry running the keyword is defined using `retry` argument either as timeout or count. `retry_interval` is the time to wait before trying to run the keyword again after the previous run has failed.\n\nIf `retry` is given as timeout, it must be in Robot Framework's time format (e.g. `1 minute`, `2 min 3 s`, `4.5`) that is explained in an appendix of Robot Framework User Guide. If it is given as count, it must have `times` or `x` postfix (e.g. `5 times`, `10 x`). `retry_interval` must always be given in Robot Framework's time format.\n\nIf the keyword does not succeed regardless of retries, this keyword fails. If the executed keyword passes, its return value is returned.\n\nExamples:\n\n```\nWait Until Keyword Succeeds  2 min  5 sec  My keyword  argument\n${result} =  Wait Until Keyword Succeeds  3x  200ms  My keyword\n```\n\nAll normal failures are caught by this keyword. Errors caused by invalid syntax, test or keyword timeouts, or fatal exceptions (caused e.g. by [Fatal Error](#Fatal%20Error)) are not caught.\n\nRunning the same keyword multiple times inside this keyword can create lots of output and considerably increase the size of the generated output files. Starting from Robot Framework 2.7, it is possible to remove unnecessary keywords from the outputs using `--RemoveKeywords WUKS` command line option.\n\nSupport for specifying `retry` as a number of times to retry is a new feature in Robot Framework 2.9. Since Robot Framework 2.9, variable errors are caught by this keyword."
        }
    ]
}