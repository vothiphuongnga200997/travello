{
    "name": "Process",
    "version": "3.0.4",
    "keywords": [
        {
            "name": "Get Process Id",
            "args": [
                "handle=None"
            ],
            "doc": "Returns the process ID (pid) of the process as an integer.\n\nIf `handle` is not given, uses the current [active process](#Active%20process).\n\nNotice that the pid is not the same as the handle returned by [Start Process](#Start%20Process) that is used internally by this library."
        },
        {
            "name": "Get Process Object",
            "args": [
                "handle=None"
            ],
            "doc": "Return the underlying `subprocess.Popen` object.\n\nIf `handle` is not given, uses the current [active process](#Active%20process)."
        },
        {
            "name": "Get Process Result",
            "args": [
                "handle=None",
                "rc=False",
                "stdout=False",
                "stderr=False",
                "stdout_path=False",
                "stderr_path=False"
            ],
            "doc": "Returns the specified [result object](#Result%20object) or some of its attributes.\n\nThe given `handle` specifies the process whose results should be returned. If no `handle` is given, results of the current [active process](#Active%20process) are returned. In either case, the process must have been finishes before this keyword can be used. In practice this means that processes started with [Start Process](#Start%20Process) must be finished either with [Wait For Process](#Wait%20For%20Process) or [Terminate Process](#Terminate%20Process) before using this keyword.\n\nIf no other arguments than the optional `handle` are given, a whole [result object](#Result%20object) is returned. If one or more of the other arguments are given any true value, only the specified attributes of the [result object](#Result%20object) are returned. These attributes are always returned in the same order as arguments are specified in the keyword signature. See [Boolean arguments](#Boolean%20arguments) section for more details about true and false values.\n\nExamples:\n\n```\nRun Process  python  -c  print 'Hello, world!'  alias=myproc  \n# Get result object          \n${result} =  Get Process Result  myproc      \nShould Be Equal  ${result.rc}  ${0}      \nShould Be Equal  ${result.stdout}  Hello, world!      \nShould Be Empty  ${result.stderr}        \n# Get one attribute          \n${stdout} =  Get Process Result  myproc  stdout=true    \nShould Be Equal  ${stdout}  Hello, world!      \n# Multiple attributes          \n${stdout}  ${stderr} =  Get Process Result  myproc  stdout=yes  stderr=yes\nShould Be Equal  ${stdout}  Hello, world!      \nShould Be Empty  ${stderr}        \n```\n\nAlthough getting results of a previously executed process can be handy in general, the main use case for this keyword is returning results over the remote library interface. The remote interface does not support returning the whole result object, but individual attributes can be returned without problems.\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Is Process Running",
            "args": [
                "handle=None"
            ],
            "doc": "Checks is the process running or not.\n\nIf `handle` is not given, uses the current [active process](#Active%20process).\n\nReturns `True` if the process is still running and `False` otherwise."
        },
        {
            "name": "Join Command Line",
            "args": [
                "*args"
            ],
            "doc": "Joins arguments into one command line string.\n\nIn resulting command line string arguments are delimited with a space, arguments containing spaces are surrounded with quotes, and possible quotes are escaped with a backslash.\n\nIf this keyword is given only one argument and that is a list like object, then the values of that list are joined instead.\n\nExample:\n\n```\n${cmd} =  Join Command Line  --option  value with spaces\nShould Be Equal  ${cmd}  --option \"value with spaces\"  \n```\n\nNew in Robot Framework 2.9.2."
        },
        {
            "name": "Process Should Be Running",
            "args": [
                "handle=None",
                "error_message=Process is not running."
            ],
            "doc": "Verifies that the process is running.\n\nIf `handle` is not given, uses the current [active process](#Active%20process).\n\nFails if the process has stopped."
        },
        {
            "name": "Process Should Be Stopped",
            "args": [
                "handle=None",
                "error_message=Process is running."
            ],
            "doc": "Verifies that the process is not running.\n\nIf `handle` is not given, uses the current [active process](#Active%20process).\n\nFails if the process is still running."
        },
        {
            "name": "Run Process",
            "args": [
                "command",
                "*arguments",
                "**configuration"
            ],
            "doc": "Runs a process and waits for it to complete.\n\n`command` and `*arguments` specify the command to execute and arguments passed to it. See [Specifying command and arguments](#Specifying%20command%20and%20arguments) for more details.\n\n`**configuration` contains additional configuration related to starting processes and waiting for them to finish. See [Process configuration](#Process%20configuration) for more details about configuration related to starting processes. Configuration related to waiting for processes consists of `timeout` and `on_timeout` arguments that have same semantics as with [Wait For Process](#Wait%20For%20Process) keyword. By default there is no timeout, and if timeout is defined the default action on timeout is `terminate`.\n\nReturns a [result object](#Result%20object) containing information about the execution.\n\nNote that possible equal signs in `*arguments` must be escaped with a backslash (e.g. `name\\=value`) to avoid them to be passed in as `**configuration`.\n\nExamples:\n\n```\n${result} =  Run Process  python  -c  print 'Hello, world!'\nShould Be Equal  ${result.stdout}  Hello, world!    \n${result} =  Run Process  ${command}  stderr=STDOUT  timeout=10s\n${result} =  Run Process  ${command}  timeout=1min  on_timeout=continue\n${result} =  Run Process  java -Dname\\=value Example  shell=True  cwd=${EXAMPLE}\n```\n\nThis keyword does not change the [active process](#Active%20process).\n\n`timeout` and `on_timeout` arguments are new in Robot Framework 2.8.4."
        },
        {
            "name": "Send Signal To Process",
            "args": [
                "signal",
                "handle=None",
                "group=False"
            ],
            "doc": "Sends the given `signal` to the specified process.\n\nIf `handle` is not given, uses the current [active process](#Active%20process).\n\nSignal can be specified either as an integer as a signal name. In the latter case it is possible to give the name both with or without `SIG` prefix, but names are case-sensitive. For example, all the examples below send signal `INT (2)`:\n\n```\nSend Signal To Process  2    # Send to active process\nSend Signal To Process  INT    \nSend Signal To Process  SIGINT  myproc  # Send to named process\n```\n\nThis keyword is only supported on Unix-like machines, not on Windows. What signals are supported depends on the system. For a list of existing signals on your system, see the Unix man pages related to signal handling (typically `man signal` or `man 7 signal`).\n\nBy default sends the signal only to the parent process, not to possible child processes started by it. Notice that when [running processes in shell](#Running%20processes%20in%20shell), the shell is the parent process and it depends on the system does the shell propagate the signal to the actual started process.\n\nTo send the signal to the whole process group, `group` argument can be set to any true value (see [Boolean arguments](#Boolean%20arguments)). This is not supported by Jython, however.\n\nNew in Robot Framework 2.8.2. Support for `group` argument is new in Robot Framework 2.8.5."
        },
        {
            "name": "Split Command Line",
            "args": [
                "args",
                "escaping=False"
            ],
            "doc": "Splits command line string into a list of arguments.\n\nString is split from spaces, but argument surrounded in quotes may contain spaces in them. If `escaping` is given a true value, then backslash is treated as an escape character. It can escape unquoted spaces, quotes inside quotes, and so on, but it also requires using double backslashes when using Windows paths.\n\nExamples:\n\n```\n@{cmd} =  Split Command Line  --option \"value with spaces\"\nShould Be True  $cmd == ['--option', 'value with spaces']  \n```\n\nNew in Robot Framework 2.9.2."
        },
        {
            "name": "Start Process",
            "args": [
                "command",
                "*arguments",
                "**configuration"
            ],
            "doc": "Starts a new process on background.\n\nSee [Specifying command and arguments](#Specifying%20command%20and%20arguments) and [Process configuration](#Process%20configuration) for more information about the arguments, and [Run Process](#Run%20Process) keyword for related examples.\n\nMakes the started process new [active process](#Active%20process). Returns an identifier that can be used as a handle to activate the started process if needed.\n\nStarting from Robot Framework 2.8.5, processes are started so that they create a new process group. This allows sending signals to and terminating also possible child processes. This is not supported by Jython in general nor by Python versions prior to 2.7 on Windows."
        },
        {
            "name": "Switch Process",
            "args": [
                "handle"
            ],
            "doc": "Makes the specified process the current [active process](#Active%20process).\n\nThe handle can be an identifier returned by [Start Process](#Start%20Process) or the `alias` given to it explicitly.\n\nExample:\n\n```\nStart Process  prog1  alias=process1\nStart Process  prog2  alias=process2\n# currently active process is process2    \nSwitch Process  process1  \n# now active process is process1    \n```"
        },
        {
            "name": "Terminate All Processes",
            "args": [
                "kill=False"
            ],
            "doc": "Terminates all still running processes started by this library.\n\nThis keyword can be used in suite teardown or elsewhere to make sure that all processes are stopped,\n\nBy default tries to terminate processes gracefully, but can be configured to forcefully kill them immediately. See [Terminate Process](#Terminate%20Process) that this keyword uses internally for more details."
        },
        {
            "name": "Terminate Process",
            "args": [
                "handle=None",
                "kill=False"
            ],
            "doc": "Stops the process gracefully or forcefully.\n\nIf `handle` is not given, uses the current [active process](#Active%20process).\n\nBy default first tries to stop the process gracefully. If the process does not stop in 30 seconds, or `kill` argument is given a true value, (see [Boolean arguments](#Boolean%20arguments)) kills the process forcefully. Stops also all the child processes of the originally started process.\n\nWaits for the process to stop after terminating it. Returns a [result object](#Result%20object) containing information about the execution similarly as [Wait For Process](#Wait%20For%20Process).\n\nOn Unix-like machines graceful termination is done using `TERM (15)` signal and killing using `KILL (9)`. Use [Send Signal To Process](#Send%20Signal%20To%20Process) instead if you just want to send either of these signals without waiting for the process to stop.\n\nOn Windows graceful termination is done using `CTRL_BREAK_EVENT` event and killing using Win32 API function `TerminateProcess()`.\n\nExamples:\n\n```\n${result} =  Terminate Process    \nShould Be Equal As Integers  ${result.rc}  -15  # On Unixes\nTerminate Process  myproc  kill=true  \n```\n\nLimitations:\n\n*   Graceful termination is not supported on Windows by Jython nor by Python versions prior to 2.7. Process is killed instead.\n*   Stopping the whole process group is not supported by Jython at all nor by Python versions prior to 2.7 on Windows.\n*   On Windows forceful kill only stops the main process, not possible child processes.\n\nAutomatically killing the process if termination fails as well as returning a result object are new features in Robot Framework 2.8.2. Terminating also possible child processes, including using `CTRL_BREAK_EVENT` on Windows, is new in Robot Framework 2.8.5."
        },
        {
            "name": "Wait For Process",
            "args": [
                "handle=None",
                "timeout=None",
                "on_timeout=continue"
            ],
            "doc": "Waits for the process to complete or to reach the given timeout.\n\nThe process to wait for must have been started earlier with [Start Process](#Start%20Process). If `handle` is not given, uses the current [active process](#Active%20process).\n\n`timeout` defines the maximum time to wait for the process. It can be given in [various time formats](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format) supported by Robot Framework, for example, `42`, `42 s`, or `1 minute 30 seconds`.\n\n`on_timeout` defines what to do if the timeout occurs. Possible values and corresponding actions are explained in the table below. Notice that reaching the timeout never fails the test.\n\n```\nValue  Action\ncontinue  The process is left running (default).\nterminate  The process is gracefully terminated.\nkill  The process is forcefully stopped.\n```\n\nSee [Terminate Process](#Terminate%20Process) keyword for more details how processes are terminated and killed.\n\nIf the process ends before the timeout or it is terminated or killed, this keyword returns a [result object](#Result%20object) containing information about the execution. If the process is left running, Python `None` is returned instead.\n\nExamples:\n\n```\n# Process ends cleanly      \n${result} =  Wait For Process  example  \nProcess Should Be Stopped  example    \nShould Be Equal As Integers  ${result.rc}  0  \n# Process does not end      \n${result} =  Wait For Process  timeout=42 secs  \nProcess Should Be Running      \nShould Be Equal  ${result}  ${NONE}  \n# Kill non-ending process      \n${result} =  Wait For Process  timeout=1min 30s  on_timeout=kill\nProcess Should Be Stopped      \nShould Be Equal As Integers  ${result.rc}  -9  \n```\n\n`timeout` and `on_timeout` are new in Robot Framework 2.8.2."
        }
    ]
}