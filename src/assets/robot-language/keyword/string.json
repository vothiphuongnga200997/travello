{
    "name": "String",
    "version": "3.0.4",
    "keywords": [
        {
            "name": "Convert To Lowercase",
            "args": [
                "string"
            ],
            "doc": "Converts string to lowercase.\n\nExamples:\n\n```\n${str1} =  Convert To Lowercase  ABC\n${str2} =  Convert To Lowercase  1A2c3D\nShould Be Equal  ${str1}  abc\nShould Be Equal  ${str2}  1a2c3d\n```\n\nNew in Robot Framework 2.8.6."
        },
        {
            "name": "Convert To Uppercase",
            "args": [
                "string"
            ],
            "doc": "Converts string to uppercase.\n\nExamples:\n\n```\n${str1} =  Convert To Uppercase  abc\n${str2} =  Convert To Uppercase  1a2C3d\nShould Be Equal  ${str1}  ABC\nShould Be Equal  ${str2}  1A2C3D\n```\n\nNew in Robot Framework 2.8.6."
        },
        {
            "name": "Decode Bytes To String",
            "args": [
                "bytes",
                "encoding",
                "errors=strict"
            ],
            "doc": "Decodes the given `bytes` to a Unicode string using the given `encoding`.\n\n`errors` argument controls what to do if decoding some bytes fails. All values accepted by `decode` method in Python are valid, but in practice the following values are most useful:\n\n*   `strict`: fail if characters cannot be decoded (default)\n*   `ignore`: ignore characters that cannot be decoded\n*   `replace`: replace characters that cannot be decoded with a replacement character\n\nExamples:\n\n```\n${string} =  Decode Bytes To String  ${bytes}  UTF-8  \n${string} =  Decode Bytes To String  ${bytes}  ASCII  errors=ignore\n```\n\nUse [Encode String To Bytes](#Encode%20String%20To%20Bytes) if you need to convert Unicode strings to byte strings, and Convert To String in `BuiltIn` if you need to convert arbitrary objects to Unicode strings."
        },
        {
            "name": "Encode String To Bytes",
            "args": [
                "string",
                "encoding",
                "errors=strict"
            ],
            "doc": "Encodes the given Unicode `string` to bytes using the given `encoding`.\n\n`errors` argument controls what to do if encoding some characters fails. All values accepted by `encode` method in Python are valid, but in practice the following values are most useful:\n\n*   `strict`: fail if characters cannot be encoded (default)\n*   `ignore`: ignore characters that cannot be encoded\n*   `replace`: replace characters that cannot be encoded with a replacement character\n\nExamples:\n\n```\n${bytes} =  Encode String To Bytes  ${string}  UTF-8  \n${bytes} =  Encode String To Bytes  ${string}  ASCII  errors=ignore\n```\n\nUse Convert To Bytes in `BuiltIn` if you want to create bytes based on character or integer sequences. Use [Decode Bytes To String](#Decode%20Bytes%20To%20String) if you need to convert byte strings to Unicode strings and Convert To String in `BuiltIn` if you need to convert arbitrary objects to Unicode."
        },
        {
            "name": "Fetch From Left",
            "args": [
                "string",
                "marker"
            ],
            "doc": "Returns contents of the `string` before the first occurrence of `marker`.\n\nIf the `marker` is not found, whole string is returned.\n\nSee also [Fetch From Right](#Fetch%20From%20Right), [Split String](#Split%20String) and [Split String From Right](#Split%20String%20From%20Right)."
        },
        {
            "name": "Fetch From Right",
            "args": [
                "string",
                "marker"
            ],
            "doc": "Returns contents of the `string` after the last occurrence of `marker`.\n\nIf the `marker` is not found, whole string is returned.\n\nSee also [Fetch From Left](#Fetch%20From%20Left), [Split String](#Split%20String) and [Split String From Right](#Split%20String%20From%20Right)."
        },
        {
            "name": "Generate Random String",
            "args": [
                "length=8",
                "chars=[LETTERS][NUMBERS]"
            ],
            "doc": "Generates a string with a desired `length` from the given `chars`.\n\nThe population sequence `chars` contains the characters to use when generating the random string. It can contain any characters, and it is possible to use special markers explained in the table below:\n\n```\nMarker  Explanation\n[LOWER]  Lowercase ASCII characters from a to z.\n[UPPER]  Uppercase ASCII characters from A to Z.\n[LETTERS]  Lowercase and uppercase ASCII characters.\n[NUMBERS]  Numbers from 0 to 9.\n```\n\nExamples:\n\n```\n${ret} =  Generate Random String    \n${low} =  Generate Random String  12  [LOWER]\n${bin} =  Generate Random String  8  01\n${hex} =  Generate Random String  4  [NUMBERS]abcdef\n```"
        },
        {
            "name": "Get Line",
            "args": [
                "string",
                "line_number"
            ],
            "doc": "Returns the specified line from the given `string`.\n\nLine numbering starts from 0 and it is possible to use negative indices to refer to lines from the end. The line is returned without the newline character.\n\nExamples:\n\n```\n${first} =  Get Line  ${string}  0\n${2nd last} =  Get Line  ${string}  -2\n```\n\nUse [Split To Lines](#Split%20To%20Lines) if all lines are needed."
        },
        {
            "name": "Get Line Count",
            "args": [
                "string"
            ],
            "doc": "Returns and logs the number of lines in the given string."
        },
        {
            "name": "Get Lines Containing String",
            "args": [
                "string",
                "pattern",
                "case_insensitive=False"
            ],
            "doc": "Returns lines of the given `string` that contain the `pattern`.\n\nThe `pattern` is always considered to be a normal string, not a glob or regexp pattern. A line matches if the `pattern` is found anywhere on it.\n\nThe match is case-sensitive by default, but giving `case_insensitive` a true value makes it case-insensitive. The value is considered true if it is a non-empty string that is not equal to `false`, `none` or `no`. If the value is not a string, its truth value is got directly in Python. Considering `none` false is new in RF 3.0.3.\n\nLines are returned as one string catenated back together with newlines. Possible trailing newline is never returned. The number of matching lines is automatically logged.\n\nExamples:\n\n```\n${lines} =  Get Lines Containing String  ${result}  An example  \n${ret} =  Get Lines Containing String  ${ret}  FAIL  case-insensitive\n```\n\nSee [Get Lines Matching Pattern](#Get%20Lines%20Matching%20Pattern) and [Get Lines Matching Regexp](#Get%20Lines%20Matching%20Regexp) if you need more complex pattern matching."
        },
        {
            "name": "Get Lines Matching Pattern",
            "args": [
                "string",
                "pattern",
                "case_insensitive=False"
            ],
            "doc": "Returns lines of the given `string` that match the `pattern`.\n\nThe `pattern` is a _glob pattern_ where:\n\n```\n*  matches everything\n?  matches any single character\n[chars]  matches any character inside square brackets (e.g. [abc] matches either a, b or c)\n[!chars]  matches any character not inside square brackets\n```\n\nA line matches only if it matches the `pattern` fully.\n\nThe match is case-sensitive by default, but giving `case_insensitive` a true value makes it case-insensitive. The value is considered true if it is a non-empty string that is not equal to `false`, `none` or `no`. If the value is not a string, its truth value is got directly in Python. Considering `none` false is new in RF 3.0.3.\n\nLines are returned as one string catenated back together with newlines. Possible trailing newline is never returned. The number of matching lines is automatically logged.\n\nExamples:\n\n```\n${lines} =  Get Lines Matching Pattern  ${result}  Wild???? example  \n${ret} =  Get Lines Matching Pattern  ${ret}  FAIL: *  case_insensitive=true\n```\n\nSee [Get Lines Matching Regexp](#Get%20Lines%20Matching%20Regexp) if you need more complex patterns and [Get Lines Containing String](#Get%20Lines%20Containing%20String) if searching literal strings is enough."
        },
        {
            "name": "Get Lines Matching Regexp",
            "args": [
                "string",
                "pattern",
                "partial_match=False"
            ],
            "doc": "Returns lines of the given `string` that match the regexp `pattern`.\n\nSee BuiltIn.Should Match Regexp for more information about Python regular expression syntax in general and how to use it in Robot Framework test data in particular.\n\nBy default lines match only if they match the pattern fully, but partial matching can be enabled by giving the `partial_match` argument a true value. The value is considered true if it is a non-empty string that is not equal to `false`, `none` or `no`. If the value is not a string, its truth value is got directly in Python. Considering `none` false is new in RF 3.0.3.\n\nIf the pattern is empty, it matches only empty lines by default. When partial matching is enabled, empty pattern matches all lines.\n\nNotice that to make the match case-insensitive, you need to prefix the pattern with case-insensitive flag `(?i)`.\n\nLines are returned as one string concatenated back together with newlines. Possible trailing newline is never returned. The number of matching lines is automatically logged.\n\nExamples:\n\n```\n${lines} =  Get Lines Matching Regexp  ${result}  Reg\\\\w{3} example  \n${lines} =  Get Lines Matching Regexp  ${result}  Reg\\\\w{3} example  partial_match=true\n${ret} =  Get Lines Matching Regexp  ${ret}  (?i)FAIL: .*  \n```\n\nSee [Get Lines Matching Pattern](#Get%20Lines%20Matching%20Pattern) and [Get Lines Containing String](#Get%20Lines%20Containing%20String) if you do not need full regular expression powers (and complexity).\n\n`partial_match` argument is new in Robot Framework 2.9. In earlier versions exact match was always required."
        },
        {
            "name": "Get Regexp Matches",
            "args": [
                "string",
                "pattern",
                "*groups"
            ],
            "doc": "Returns a list of all non-overlapping matches in the given string.\n\n`string` is the string to find matches from and `pattern` is the regular expression. See BuiltIn.Should Match Regexp for more information about Python regular expression syntax in general and how to use it in Robot Framework test data in particular.\n\nIf no groups are used, the returned list contains full matches. If one group is used, the list contains only contents of that group. If multiple groups are used, the list contains tuples that contain individual group contents. All groups can be given as indexes (starting from 1) and named groups also as names.\n\nExamples:\n\n```\n${no match} =  Get Regexp Matches  the string  xxx    \n${matches} =  Get Regexp Matches  the string  t..    \n${one group} =  Get Regexp Matches  the string  t(..)  1  \n${named group} =  Get Regexp Matches  the string  t(?P<name>..)  name  \n${two groups} =  Get Regexp Matches  the string  t(.)(.)  1  2\n```\n\n\\=>\n\n${no match} = \\[\\]\n${matches} = \\['the', 'tri'\\]\n${one group} = \\['he', 'ri'\\]\n${named group} = \\['he', 'ri'\\]\n${two groups} = \\[('h', 'e'), ('r', 'i')\\]\n\nNew in Robot Framework 2.9."
        },
        {
            "name": "Get Substring",
            "args": [
                "string",
                "start",
                "end=None"
            ],
            "doc": "Returns a substring from `start` index to `end` index.\n\nThe `start` index is inclusive and `end` is exclusive. Indexing starts from 0, and it is possible to use negative indices to refer to characters from the end.\n\nExamples:\n\n```\n${ignore first} =  Get Substring  ${string}  1  \n${ignore last} =  Get Substring  ${string}    -1\n${5th to 10th} =  Get Substring  ${string}  4  10\n${first two} =  Get Substring  ${string}    1\n${last two} =  Get Substring  ${string}  -2  \n```"
        },
        {
            "name": "Remove String",
            "args": [
                "string",
                "*removables"
            ],
            "doc": "Removes all `removables` from the given `string`.\n\n`removables` are used as literal strings. Each removable will be matched to a temporary string from which preceding removables have been already removed. See second example below.\n\nUse [Remove String Using Regexp](#Remove%20String%20Using%20Regexp) if more powerful pattern matching is needed. If only a certain number of matches should be removed, [Replace String](#Replace%20String) or [Replace String Using Regexp](#Replace%20String%20Using%20Regexp) can be used.\n\nA modified version of the string is returned and the original string is not altered.\n\nExamples:\n\n```\n${str} =  Remove String  Robot Framework  work  \nShould Be Equal  ${str}  Robot Frame    \n${str} =  Remove String  Robot Framework  o  bt\nShould Be Equal  ${str}  R Framewrk    \n```\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Remove String Using Regexp",
            "args": [
                "string",
                "*patterns"
            ],
            "doc": "Removes `patterns` from the given `string`.\n\nThis keyword is otherwise identical to [Remove String](#Remove%20String), but the `patterns` to search for are considered to be a regular expression. See [Replace String Using Regexp](#Replace%20String%20Using%20Regexp) for more information about the regular expression syntax. That keyword can also be used if there is a need to remove only a certain number of occurrences.\n\nNew in Robot Framework 2.8.2."
        },
        {
            "name": "Replace String",
            "args": [
                "string",
                "search_for",
                "replace_with",
                "count=-1"
            ],
            "doc": "Replaces `search_for` in the given `string` with `replace_with`.\n\n`search_for` is used as a literal string. See [Replace String Using Regexp](#Replace%20String%20Using%20Regexp) if more powerful pattern matching is needed. If you need to just remove a string see [Remove String](#Remove%20String).\n\nIf the optional argument `count` is given, only that many occurrences from left are replaced. Negative `count` means that all occurrences are replaced (default behaviour) and zero means that nothing is done.\n\nA modified version of the string is returned and the original string is not altered.\n\nExamples:\n\n```\n${str} =  Replace String  Hello, world!  world  tellus  \nShould Be Equal  ${str}  Hello, tellus!      \n${str} =  Replace String  Hello, world!  l  ${EMPTY}  count=1\nShould Be Equal  ${str}  Helo, world!      \n```"
        },
        {
            "name": "Replace String Using Regexp",
            "args": [
                "string",
                "pattern",
                "replace_with",
                "count=-1"
            ],
            "doc": "Replaces `pattern` in the given `string` with `replace_with`.\n\nThis keyword is otherwise identical to [Replace String](#Replace%20String), but the `pattern` to search for is considered to be a regular expression. See BuiltIn.Should Match Regexp for more information about Python regular expression syntax in general and how to use it in Robot Framework test data in particular.\n\nIf you need to just remove a string see [Remove String Using Regexp](#Remove%20String%20Using%20Regexp).\n\nExamples:\n\n```\n${str} =  Replace String Using Regexp  ${str}  20\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d  <DATE>  \n${str} =  Replace String Using Regexp  ${str}  (Hello|Hi)  ${EMPTY}  count=1\n```"
        },
        {
            "name": "Should Be Byte String",
            "args": [
                "item",
                "msg=None"
            ],
            "doc": "Fails if the given `item` is not a byte string.\n\nUse [Should Be Unicode String](#Should%20Be%20Unicode%20String) if you want to verify the `item` is a Unicode string, or [Should Be String](#Should%20Be%20String) if both Unicode and byte strings are fine. See [Should Be String](#Should%20Be%20String) for more details about Unicode strings and byte strings.\n\nThe default error message can be overridden with the optional `msg` argument."
        },
        {
            "name": "Should Be Lowercase",
            "args": [
                "string",
                "msg=None"
            ],
            "doc": "Fails if the given `string` is not in lowercase.\n\nFor example, `'string'` and `'with specials!'` would pass, and `'String'`, `''` and `' '` would fail.\n\nThe default error message can be overridden with the optional `msg` argument.\n\nSee also [Should Be Uppercase](#Should%20Be%20Uppercase) and [Should Be Titlecase](#Should%20Be%20Titlecase)."
        },
        {
            "name": "Should Be String",
            "args": [
                "item",
                "msg=None"
            ],
            "doc": "Fails if the given `item` is not a string.\n\nWith Python 2, except with IronPython, this keyword passes regardless is the `item` a Unicode string or a byte string. Use [Should Be Unicode String](#Should%20Be%20Unicode%20String) or [Should Be Byte String](#Should%20Be%20Byte%20String) if you want to restrict the string type. Notice that with Python 2, except with IronPython, `'string'` creates a byte string and `u'unicode'` must be used to create a Unicode string.\n\nWith Python 3 and IronPython, this keyword passes if the string is a Unicode string but fails if it is bytes. Notice that with both Python 3 and IronPython, `'string'` creates a Unicode string, and `b'bytes'` must be used to create a byte string.\n\nThe default error message can be overridden with the optional `msg` argument."
        },
        {
            "name": "Should Be Titlecase",
            "args": [
                "string",
                "msg=None"
            ],
            "doc": "Fails if given `string` is not title.\n\n`string` is a titlecased string if there is at least one character in it, uppercase characters only follow uncased characters and lowercase characters only cased ones.\n\nFor example, `'This Is Title'` would pass, and `'Word In UPPER'`, `'Word In lower'`, `''` and `' '` would fail.\n\nThe default error message can be overridden with the optional `msg` argument.\n\nSee also [Should Be Uppercase](#Should%20Be%20Uppercase) and [Should Be Lowercase](#Should%20Be%20Lowercase)."
        },
        {
            "name": "Should Be Unicode String",
            "args": [
                "item",
                "msg=None"
            ],
            "doc": "Fails if the given `item` is not a Unicode string.\n\nUse [Should Be Byte String](#Should%20Be%20Byte%20String) if you want to verify the `item` is a byte string, or [Should Be String](#Should%20Be%20String) if both Unicode and byte strings are fine. See [Should Be String](#Should%20Be%20String) for more details about Unicode strings and byte strings.\n\nThe default error message can be overridden with the optional `msg` argument."
        },
        {
            "name": "Should Be Uppercase",
            "args": [
                "string",
                "msg=None"
            ],
            "doc": "Fails if the given `string` is not in uppercase.\n\nFor example, `'STRING'` and `'WITH SPECIALS!'` would pass, and `'String'`, `''` and `' '` would fail.\n\nThe default error message can be overridden with the optional `msg` argument.\n\nSee also [Should Be Titlecase](#Should%20Be%20Titlecase) and [Should Be Lowercase](#Should%20Be%20Lowercase)."
        },
        {
            "name": "Should Not Be String",
            "args": [
                "item",
                "msg=None"
            ],
            "doc": "Fails if the given `item` is a string.\n\nSee [Should Be String](#Should%20Be%20String) for more details about Unicode strings and byte strings.\n\nThe default error message can be overridden with the optional `msg` argument."
        },
        {
            "name": "Split String",
            "args": [
                "string",
                "separator=None",
                "max_split=-1"
            ],
            "doc": "Splits the `string` using `separator` as a delimiter string.\n\nIf a `separator` is not given, any whitespace string is a separator. In that case also possible consecutive whitespace as well as leading and trailing whitespace is ignored.\n\nSplit words are returned as a list. If the optional `max_split` is given, at most `max_split` splits are done, and the returned list will have maximum `max_split + 1` elements.\n\nExamples:\n\n```\n@{words} =  Split String  ${string}      \n@{words} =  Split String  ${string}  ,${SPACE}    \n${pre}  ${post} =  Split String  ${string}  ::  1\n```\n\nSee [Split String From Right](#Split%20String%20From%20Right) if you want to start splitting from right, and [Fetch From Left](#Fetch%20From%20Left) and [Fetch From Right](#Fetch%20From%20Right) if you only want to get first/last part of the string."
        },
        {
            "name": "Split String From Right",
            "args": [
                "string",
                "separator=None",
                "max_split=-1"
            ],
            "doc": "Splits the `string` using `separator` starting from right.\n\nSame as [Split String](#Split%20String), but splitting is started from right. This has an effect only when `max_split` is given.\n\nExamples:\n\n```\n${first}  ${rest} =  Split String  ${string}  -  1\n${rest}  ${last} =  Split String From Right  ${string}  -  1\n```"
        },
        {
            "name": "Split String To Characters",
            "args": [
                "string"
            ],
            "doc": "Splits the given `string` to characters.\n\nExample:\n\n```\n@{characters} =  Split String To Characters  ${string}\n```"
        },
        {
            "name": "Split To Lines",
            "args": [
                "string",
                "start=0",
                "end=None"
            ],
            "doc": "Splits the given string to lines.\n\nIt is possible to get only a selection of lines from `start` to `end` so that `start` index is inclusive and `end` is exclusive. Line numbering starts from 0, and it is possible to use negative indices to refer to lines from the end.\n\nLines are returned without the newlines. The number of returned lines is automatically logged.\n\nExamples:\n\n```\n@{lines} =  Split To Lines  ${manylines}    \n@{ignore first} =  Split To Lines  ${manylines}  1  \n@{ignore last} =  Split To Lines  ${manylines}    -1\n@{5th to 10th} =  Split To Lines  ${manylines}  4  10\n@{first two} =  Split To Lines  ${manylines}    1\n@{last two} =  Split To Lines  ${manylines}  -2  \n```\n\nUse [Get Line](#Get%20Line) if you only need to get a single line."
        },
        {
            "name": "Strip String",
            "args": [
                "string",
                "mode=both",
                "characters=None"
            ],
            "doc": "Remove leading and/or trailing whitespaces from the given string.\n\n`mode` is either `left` to remove leading characters, `right` to remove trailing characters, `both` (default) to remove the characters from both sides of the string or `none` to return the unmodified string.\n\nIf the optional `characters` is given, it must be a string and the characters in the string will be stripped in the string. Please note, that this is not a substring to be removed but a list of characters, see the example below.\n\nExamples:\n\n```\n${stripped}=  Strip String  ${SPACE}Hello${SPACE}  \nShould Be Equal  ${stripped}  Hello  \n${stripped}=  Strip String  ${SPACE}Hello${SPACE}  mode=left\nShould Be Equal  ${stripped}  Hello${SPACE}  \n${stripped}=  Strip String  aabaHelloeee  characters=abe\nShould Be Equal  ${stripped}  Hello  \n```\n\nNew in Robot Framework 3.0."
        }
    ]
}